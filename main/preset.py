"""
–ü—Ä–µ—Å–µ—Ç—ã —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏

"""

import json


def text_lot(lots, i):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª–æ—Ç–µ.

    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.
    :param i: –í–µ—Ä–æ—è—Ç–Ω–æ id –Ω—É–∂–Ω–æ–≥–æ –ª–æ—Ç–∞
    :return: –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    """

    emoji_symbol = {'bomb': 'üí£', 'cat': 'üò∏', 'cool': 'üòé', 'devil': 'üòà', 'rich': 'ü§ë', 'scream': 'üò±', 'tongue': 'üòõ',
                    'zipped': 'ü§ê'}

    date_time_str = lots[i]['creationDate'].split('+')[0]
    date = date_time_str.split('T')[0]
    date = date.split('-')
    months = ['—è–Ω–≤\.', '—Ñ–µ–≤\.', '–º–∞—Ä\.', '–∞–ø—Ä\.', '–º–∞—è', '–∏—é–Ω—è',
              '–∏—é–ª—è', '–∞–≤–≥\.', '—Å–µ–Ω\.', '–æ–∫—Ç\.', '–Ω–æ—è\.', '–¥–µ–∫\.']
    date = f'{date[2]} {months[int(date[1]) - 1]}'
    time_str = date_time_str.split('T')[1].split('.')[0].split(':')
    time_str = time_str[0] + ':' + time_str[1]
    emojis = ''
    for emoji_text in lots[i]['emojis']:
        print(emoji_text)
        emojis += emoji_symbol[emoji_text]
    cymbal_emoji = emojis if emojis != '' else '–ø—É—Å—Ç–æ\!'
    answer = f'_{str(lots[i]["value"])}_' + (
        '_–ì–ë_ ' if lots[i]['type'] == 'gb' else (' –º–∏–Ω—É—Ç\(—ã\) ' if lots[i]['type'] == 'min' else ' –µ–¥\.')) + \
             f'–∑–∞ _{str(int(lots[i]["price"]))}‚ÇΩ_'
    answer += f"\n\n*–≠–º–æ–¥–∑–∏:* {cymbal_emoji}"
    answer += f'\n*–ò–º—è:* {lots[i]["name"] if lots[i]["name"] is not None else "–ê–Ω–æ–Ω–∏–º–Ω–æ"}'
    answer += f"\n*–°–æ–∑–¥–∞–Ω:* {date} {time_str}"
    answer += '\n*–°—Ç–∞—Ç—É—Å:* ' + ('–í —Ç–æ–ø–µ ‚¨ÜÔ∏è' if lots[i]['status'] else '–í –∂–æ–ø–µ ‚¨áÔ∏è')
    return answer


# noinspection PyTypeChecker
def t2b(uid, data: dict = True, type_='g'):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü—Ä–∏ —Ç–∏–ø–µ 'u')
    :param type_: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ('g'- –ø–æ–ª—É—á–∏—Ç—å [default], 'u' - –æ–±–Ω–æ–≤–∏—Ç—å, 'd' - —Å–±—Ä–æ—Å)
    :return: –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ü—Ä–∏ —Ç–∏–ø–µ 'g')
    """
    uid = str(uid)
    default = {'auth_login': '', 'auth_password': '', 'status_run_auto': 0, 'status_lagg': 0,
               'status_sms': 0, 'stage_authorize': 0, 'lvl_setting': 0, 'lvl_redactor': 0,
               'security_code': '', 'security_code_token': '', "config_count": 6, "config_autotime": 35,
               "config_uom": "gb", "config_repeat": 20, "config_price": 90, "config_type": "data"}

    with open(f'data/t2b.json') as f:
        if type_ == 'u':
            file = json.load(f)
            for i in data:
                file[uid][i] = data[i]
            with open(f'data/t2b.json', 'w') as f2:
                json.dump(file, f2)
        elif type_ == 'g':
            file = json.load(f)
            if uid in file:
                return file[uid]
            else:
                file[uid] = default

                with open('data/t2b.json', 'w') as f2:
                    json.dump(file, f2)
                    return file[uid]
        elif type_ == 'd':
            file = json.load(f)
            if uid in file:
                file[uid] = default
                with open(f'data/t2b.json', 'w') as f2:
                    json.dump(file, f2)
