"""
    –§—É–Ω–∫—Ü–∏–∏ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤—Å–µ–º—É –ø—Ä–æ–µ–∫—Ç—É.
"""
import time

from log import log

import asyncio
import json

# !/usr/bin/env python # -* - coding: utf-8-* -

cache_cart = 'data/cache_cart.json'


async def async_start(start):
    """

    :param start:
    """
    loop = asyncio.get_event_loop()
    from concurrent.futures import ThreadPoolExecutor
    executor = ThreadPoolExecutor()
    # noinspection PyTypeChecker
    await loop.run_in_executor(executor, start)


async def background_load(self):
    """

    :param self:
    """

    # noinspection PyTypeChecker, PyBroadException
    def start():
        """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
        """

        with open('data/cache_prices.json') as f:
            result = json.load(f)
            result_filtered = filter_shops(result['cache'])

            self.base_price = result_filtered
            log('–ü—Ä–∞–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫—ç—à!')

        try:
            with open('data/cache_cart.json', 'w') as f:
                json.dump({'cart': []}, f)
        except FileNotFoundError:
            pass

        self.activate_enter_finder
        log('–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∂–∞—Ç–∏—é "enter" –≤–∫–ª—é—á–µ–Ω!')

    def start_tg():
        from tg_bot import run, start
        run()
        log('TG –±–æ—Ç –≤–∫–ª—é—á–µ–Ω!')

    async def send_first():
        time.sleep(1)
        from T2.menu import admin_menu
        class Call(object):
            """
                –ö–ª–∞—Å—Å 'call'
            """
            data = '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫'

            class message: message_id = 0

            class from_user: id = 828853360

            def __init__(self):
                self.data = '–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫'
                self.from_user.id = 828853360
                self.message.message_id = 0

        admin_menu(Call, 1)
        log('–ê–¥–º–∏–Ω—É –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é!')

    def start_taxi():
        import ParserTaxi.taxi_parser as tp
        tp.run()
        log('–ü–∞—Ä—Å–µ—Ä —Ç–∞–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω!')

    await async_start(start)
    await async_start(start_taxi)
    await send_first()
    await async_start(start_tg)


async def refresh(self):
    """

    :param self:
    """

    def start():
        """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
        """

        from PriceCheck.read_doc import scanner
        scanner('')

        log('–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ!')
        with open('data/cache_prices.json') as f:
            result = json.load(f)
            result_filtered = filter_shops(result)
            self.base_price = result_filtered
            log('–û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–π–ª—ã –∏ –æ–±–Ω–æ–≤–ª—ë–Ω –∫—ç—à!')

        with open('data/config.json') as f:
            data = json.load(f)
            if data['metro_active']:  # –ï—Å–ª–∏ –º–µ—Ç—Ä–æ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                from PriceCheck import parse_metro
                parse_metro.auth_check()
                log('MShop –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!')

    await async_start(start)


async def send_to_cart(item, parse_metro):
    """

    :param item:
    :param parse_metro:
    """

    def start():
        """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
        """

        parse_metro.add_cart(item)
        log(f'–¢–æ–≤–∞—Ä: "{item["name"]}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')

    await async_start(start)


async def remove_from_cart(item, parse_metro):
    """

    :param item:
    :param parse_metro:
    """

    def start():
        """
            –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
        """
        parse_metro.remove_cart(item)
        log(f'–¢–æ–≤–∞—Ä: "{item["name"]}" —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!')

    await async_start(start)


def filter_shops(items: list):
    """
    –§–∏–ª—å—Ç—Ä –∫–∞–∫–æ–π-—Ç–æ
    :param items:
    :return:
    """
    shops = []
    items_filtered = []

    with open('data/config.json') as f:
        config = json.load(f)
        for shop in config['shops']:
            if shop['active']:
                shops.append(shop['seller'])

    for item in items:
        if item['seller'] in shops:
            items_filtered.append(item)

    return items_filtered


def get_cart():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã.
    :return:
    """
    with open(cache_cart) as f:
        cart = json.load(f)
        return cart['cart']


def add_cart(item: dict):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.
    :param item:
    :return:
    """

    cart = get_cart()
    cart.append(item)
    cart = {'cart': cart}

    with open(cache_cart, 'w') as f:
        # noinspection PyTypeChecker
        json.dump(cart, f)
        return True


def send_cart(self):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç.
    :param self:
    """
    for shop in self.send_text:
        if len(self.send_text[shop]) > 1:
            name = ('–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞' if shop.lower() == '–º–∞—Ç—É—à–∫–∞' else '–£–ª—å—è–Ω–∞' if shop.lower() == '–∞–ª–º–∞' else '')
            header_text = (
                (name + ', –¥–æ–±—Ä—ã–π –¥–µ–Ω—å!\n–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:') if shop.lower() not in ('metro', '–∫—É–ø–µ—Ä') else 'METRO:')
            text_cart = header_text + '\n' + self.send_text[shop]

            from tg_bot import just_send

            just_send(text_cart)


def remove_cart(item: dict):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    :param item:
    :return:
    """
    cart = get_cart()
    cart.remove(item)
    cart = {'cart': cart}
    with open(cache_cart, 'w') as f:
        # noinspection PyTypeChecker
        json.dump(cart, f)
        return True


def preset(name, back_list, new):
    """

    :param name:
    :param back_list:
    :param new:
    :return:
    """
    name_ = None
    if type(back_list) not in (list, tuple):
        return None

    for i in back_list:
        if i in name.lower():
            name_ = new.join(name.lower().split(i))
            break
    return name_


def filter_names(name):
    """
    –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞ –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É.
    :param name: –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.
    :return: –ì–æ—Ç–æ–≤–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ.
    """
    base = {
        '–∫—É—Ä–∏–Ω–æ–µ': ('—Ü–±', '—Ü—ã–ø–ª–µ–Ω–∫–∞-–±—Ä–æ–π–ª–µ—Ä–æ–≤', '—Ü—ã–ø–ª–µ–Ω–∫–∞ –±—Ä–æ–π–ª–µ—Ä–∞', '–∫—É—Ä.–≥—Ä—É–¥–∫–∏', '—Ü—ã–ø–ª–µ–Ω–∫–∞'),
        '—Ñ–∏–ª–µ –≥—Ä—É–¥–∫–∏': ('—Ñ–∏–ª–µ  –≥—Ä—É–¥–∫–∏',)
    }

    all_check = {}
    find_type = None
    name_ = name

    for i in base:
        for i2 in base[i]:
            all_check[i2] = i  # –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–º–µ–Ω

    for i in all_check:
        if i in name:
            find_type = all_check[i]
            break

    if find_type:
        back_list = base[find_type]
        new = find_type
        if type(back_list) not in (list, tuple):
            return None

        for i in back_list:
            if i in name.lower():
                name_ = new.join(name.lower().split(i))
                break

    return name_


def str_to_dict1(text: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å, –≤–µ—Ä—Å–∏—è 1.
    :param text: –°—Ç—Ä–æ–∫–∞.
    :return:
    """
    if not isinstance(text, str):
        log('–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.', 3)
        return

    new = ''.join((''.join(''.join(text.split('{')).split('}')).split("'")))
    new = [new.split(', ')[0].split(': '), new.split(', ')[1].split(': '), new.split(', ')[2].split(': ')]
    new = {new[0][0]: new[0][1], new[1][0]: new[1][1], new[2][0]: new[2][1]}
    return new


def str_to_dict2(text: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å, –≤–µ—Ä—Å–∏—è 2.
    :param text: –°—Ç—Ä–æ–∫–∞.
    :return:
    """

    if not isinstance(text, str):
        log('–ü–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π.', 3)
        return

    new = ''.join((''.join(''.join(text.split('{')).split('}')).split("'")))
    new = new.split(', ')
    end = {}
    for i in new:
        data = i.split(': ')
        if len(data) == 2:
            end[data[0]] = data[1]
    return end


def str_to_list(text: str):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.
    :param text: –°—Ç—Ä–æ–∫–∞.
    :return:
    """
    text = str(text)
    new = ''.join((''.join(''.join(text.split('[')).split(']')).split("'")))
    new = new.split(', ')
    end = {}
    for i in new:
        data = i.split(', ')
        if len(data) == 2:
            end[data[0]] = data[1]
    return end


def finder(text: str, items: list):
    """
    –ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ.

    :param text: –ò–º—è –æ–±—ä–µ–∫—Ç–∞.
    :param items: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤.
    :return:
    """
    text = text.split(' ')
    finding_items = []
    first_word = True
    for word in text:
        if word != '':
            if first_word:
                for item in items:
                    if word.lower() in item['name'].lower():
                        finding_items.append(item)
                first_word = False
            else:
                finding_items_temp = []
                for item in finding_items:
                    if word.lower() in item['name'].lower():
                        finding_items_temp.append(item)
                finding_items = finding_items_temp

    return finding_items


def text_lot(lots, i):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ª–æ—Ç–µ.

    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ª–æ—Ç–æ–≤.
    :param i: –í–µ—Ä–æ—è—Ç–Ω–æ id –Ω—É–∂–Ω–æ–≥–æ –ª–æ—Ç–∞
    :return: –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    """

    emoji_symbol = {'bomb': 'üí£', 'cat': 'üò∏', 'cool': 'üòé', 'devil': 'üòà', 'rich': 'ü§ë', 'scream': 'üò±', 'tongue': 'üòõ',
                    'zipped': 'ü§ê'}

    date_time_str = lots[i]['creationDate'].split('+')[0]
    date = date_time_str.split('T')[0]
    date = date.split('-')
    months = ['—è–Ω–≤\.', '—Ñ–µ–≤\.', '–º–∞—Ä\.', '–∞–ø—Ä\.', '–º–∞—è', '–∏—é–Ω—è',
              '–∏—é–ª—è', '–∞–≤–≥\.', '—Å–µ–Ω\.', '–æ–∫—Ç\.', '–Ω–æ—è\.', '–¥–µ–∫\.']
    date = f'{date[2]} {months[int(date[1]) - 1]}'
    time_str = date_time_str.split('T')[1].split('.')[0].split(':')
    time_str = time_str[0] + ':' + time_str[1]
    emojis = ''
    for emoji_text in lots[i]['emojis']:
        print(emoji_text)
        emojis += emoji_symbol[emoji_text]
    cymbal_emoji = emojis if emojis != '' else '–ø—É—Å—Ç–æ\!'
    answer = f'_{str(lots[i]["value"])}_' + (
        '_–ì–ë_ ' if lots[i]['type'] == 'gb' else (' –º–∏–Ω—É—Ç\(—ã\) ' if lots[i]['type'] == 'min' else ' –µ–¥\.')) + \
             f'–∑–∞ _{str(int(lots[i]["price"]))}‚ÇΩ_'
    answer += f"\n\n*–≠–º–æ–¥–∑–∏:* {cymbal_emoji}"
    answer += f'\n*–ò–º—è:* {lots[i]["name"] if lots[i]["name"] is not None else "–ê–Ω–æ–Ω–∏–º–Ω–æ"}'
    answer += f"\n*–°–æ–∑–¥–∞–Ω:* {date} {time_str}"
    answer += '\n*–°—Ç–∞—Ç—É—Å:* ' + ('–í —Ç–æ–ø–µ ‚¨ÜÔ∏è' if lots[i]['status'] else '–í –∂–æ–ø–µ ‚¨áÔ∏è')
    return answer


def t2b(uid, data: dict = True, type_='g'):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    :param data: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü—Ä–∏ —Ç–∏–ø–µ 'u')
    :param type_: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è: ('g'- –ø–æ–ª—É—á–∏—Ç—å [default], 'u' - –æ–±–Ω–æ–≤–∏—Ç—å, 'd' - —Å–±—Ä–æ—Å)
    :return: –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–ü—Ä–∏ —Ç–∏–ø–µ 'g')
    """
    uid = str(uid)
    default = {'auth_login': '', 'auth_password': '', 'status_run_auto': 0, 'status_lagg': 0,
               'status_sms': 0, 'stage_authorize': 0, 'lvl_setting': 0, 'lvl_redactor': 0,
               'security_code': '', 'security_code_token': '', "config_count": 6, "config_autotime": 35,
               "config_uom": "gb", "config_repeat": 20, "config_price": 90, "config_type": "data"}

    with open(f'data/t2b.json') as f:
        if type_ == 'u':
            file = json.load(f)
            for i in data:
                file[uid][i] = data[i]
            with open(f'data/t2b.json', 'w') as f2:
                json.dump(file, f2)
        elif type_ == 'g':
            file = json.load(f)
            if uid in file:
                return file[uid]
            else:
                file[uid] = default

                with open('data/t2b.json', 'w') as f2:
                    json.dump(file, f2)
                    return file[uid]
        elif type_ == 'd':
            file = json.load(f)
            if uid in file:
                file[uid] = default
                with open(f'data/t2b.json', 'w') as f2:
                    json.dump(file, f2)
