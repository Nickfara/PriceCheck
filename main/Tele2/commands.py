import json
import random
import time

from Tele2 import api
from Tele2 import base
from Tele2 import functions
from Tele2 import menu
from telebot import types
import math

base_u = base.update_users
base_g = base.get_user

from Tele2 import config
from log import log

def_account = config.account
def_traffic = config.add_traffic()
cache = {}
cache_lot = {}
stop_timer = [False]


def auth(call, bot):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    :param call:
    :param bot:
    :return:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    data = call.data

    # –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –ë–î, —Å–æ–∑–¥–∞—ë—Ç—Å—è —Ç–∞–±–ª–∏—Ü–∞
    if DB is None:
        log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞!', 1)
        base.create_user(uid)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if DB['stage_autorize'] < 3:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if data[0] == '8':
            data = '7'.join(data.split('8'))
        elif data[0] == '+' and data[1] == '7':
            data = '7'.join(data.split('+7'))

        # 1 –≠—Ç–∞–ø - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω)
        if len(str(data)) == 11 and (data[0] == '7') and data[1] == '9' and DB['stage_autorize'] == 0:
            base_u({'id': uid, 'auth_login': data, 'stage_autorize': 1})
            answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:'
            menu.login_password(call, bot, answer)

        # 1 –≠—Ç–∞–ø - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
        elif DB['stage_autorize'] == 0:
            answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, \n–≤ —Ñ–æ—Ä–º–∞—Ç–µ: [79000000000]'
            menu.login_number(call, bot, answer)

        # 2 –≠—Ç–∞–ø - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        elif DB['stage_autorize'] == 1:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–æ–º:
            if DB['status_sms'] == 0:
                # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω:
                if len(str(DB['auth_password'])) == 0 or DB['auth_password'] == None:
                    base_u({'id': uid, 'auth_password': data, 'security_code': ''})

                response = api.security_code(uid)

                # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:
                if response['status']:
                    base_u({'id': uid, 'stage_autorize': 2, 'auth_password': DB['auth_password'],
                            'security_code_token': response['response'].json()['security_code_token']})
                    answer = '–ù–∞ –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥\! –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:'
                    menu.security_code(call, bot, answer)
            else:
                base_u({'id': uid, 'stage_autorize': 2})

        # 3 –≠—Ç–∞–ø - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
        elif DB['stage_autorize'] == 2:
            response = api.auth(uid)

            # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
            if response['status']:
                base_u(
                    {'id': uid, 'config_count': def_traffic[0]['volume']['value'], 'config_autotime': def_traffic[1][0],
                     'stage_autorize': 3, 'status_sms': 0, 'config_uom': def_traffic[0]['volume']['uom'],
                     'config_repit': def_traffic[1][1], 'config_price': def_traffic[0]['cost']['amount'],
                     'config_type': def_traffic[0]['trafficType']})
                cache[uid] = {'status_autosell': 0, 'status_autotop': 0, 'status_lagg': 0}

                update_def_traffic(call)
                return DB

            # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ - –≤–æ–∑–≤—Ä–∞—Ç –∫ 1 —ç—Ç–∞–ø—É:
            else:
                base.delete_user(uid)
                base.create_user(uid)
                answer = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞\!' \
                         '\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [79000000000]'
                log('–ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.', 3)
                menu.login_number(call, bot, answer)

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.
    else:
        answer = '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\!'
        log(answer, 3)
        return DB


def admin_auth(call, bot):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞.

    :param call:
    :param bot:
    :return:
    """
    deauth(call, bot, False)
    uid = call.from_user.id
    DB = base_g(uid)
    data = call.data

    deauth(call, bot, False)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
    if DB is None:
        log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞')
        base.create_user(uid, lvl_autorize=2, lvl_setting=0)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ +7 (992)022-88-48
    if data == '–í–æ–π—Ç–∏1':
        log('–í—Ö–æ–¥ –≤ +7 (992)022-88-48', 1)
        base_u({'id': uid, 'stage_autorize': 1, 'auth_login': '79920228848', 'auth_password': '649UPY'})
        response = auth(call, bot)
        return response


def deauth(call, bot, lobby):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    :param call:
    :param bot:
    :param lobby:
    :return:
    """
    try:
        uid = call.from_user.id
        DB = base_g(uid)

        if DB:
            base.delete_user(uid)

        if lobby:
            menu.start(call.message, bot)

        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.', 1)
        return True

    except KeyError:
        log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', 3)
        return False


def houme_menu(call, bot):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.
    :param call:
    :param bot:
    """
    uid = call.from_user.id
    cache[uid] = {'status_autosell': 0, 'status_autotop': 0, 'status_lagg': 0}
    menu.home(call, bot)


# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings(call, bot):
    """

    :param call:
    :param bot:
    :return:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    data = call.data

    config_uom = DB['config_uom']
    if DB['lvl_setting'] == 0:
        name = ("üåê *–í–∏–¥:* –ì–∏–≥–∞–±–∞–π—Ç—ã" if DB['config_uom'] == "gb" else "‚òéÔ∏è *–í–∏–¥:* –ú–∏–Ω—É—Ç—ã")
        name2 = ("–ì–ë" if DB['config_uom'] == "gb" else "–ú–ò–ù")
        answer = f'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–¢–µ–∫—É—â–∏–µ: \n{name}\. ' \
                 f'\nüìè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {DB["config_count"]}{name2} –∑–∞ {DB["config_price"]}‚ÇΩ' \
                 f'\nüïì *–ò–Ω—Ç–µ—Ä–≤–∞–ª:* {DB["config_autotime"]} —Å–µ–∫—É–Ω–¥\.' \
                 f'\nüîÇ *–ü–æ–≤—Ç–æ—Ä—ã:* {DB["config_repit"]} —Ä–∞–∑\(–∞\)\.'
        menu.settings(call, bot, answer)
    elif DB['lvl_setting'] == 1:
        try:
            int(str(data))
            base_u({'id': uid, 'config_autotime': call.message.text})
            return True
        except:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5'
            menu.settings(call, bot, answer)
    elif DB['lvl_setting'] == 2:

        try:
            config_price = int(str(data))
        except:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã.'
            menu.settings(call, bot, answer)
            return False

        if config_uom == 'gb':
            base_u({'id': uid, 'config_count': data, 'config_price': str(math.ceil(config_price * 15))})
        elif config_uom == 'min':
            base_u({'id': uid, 'config_count': data, 'config_price': str(math.ceil(int(data) / 1.25))})
        return True

    elif DB['lvl_setting'] == 3:
        try:
            int(str(data))
            base_u({'id': uid, 'config_repit': call.message.text})
            return True
        except:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏–ª–∏ ' \
                     '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. –£–∫–∞–∑–∞–≤ 0, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±—É–¥—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10'
            menu.settings(call, bot, answer)
            return False
    elif DB['lvl_setting'] == 4:
        if data == '–ú–∏–Ω—É—Ç—ã':
            base_u({'id': uid, 'config_type': 'voice', 'config_count': '62', 'config_price': '50', 'config_uom': 'min'})
            return True
        elif data == '–ì–∏–≥–∞–±–∞–π—Ç—ã':
            base_u({'id': uid, 'config_type': 'data', 'config_count': '6', 'config_price': '90', 'config_uom': 'gb'})
            return True
        else:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞:'
            menu.settings(call, bot, answer)


def profile(call, bot):
    """

    :param call:
    :param bot:
    :return:
    """
    global allow_voice, allow_data, incom

    uid = call.from_user.id
    response = api.get_rests(uid)
    check = True

    def auth_error_message(response):  # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response['text']:
            answer = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\! \n–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ\.'
            menu.error(call, bot, answer)
        else:
            menu.error(call, bot)

    if response['status']:
        allow_traffic = response['rests']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_rests', 3)
        log(response, 3)
        allow_traffic = {'data': ''}
        check = False
        auth_error_message(response)

        return False

    response = api.get_statistics(uid)
    if response['status']:
        statistics = response['response'].json()['data']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_statistics', 3)
        log(response, 3)
        statistics = {"soldVoice": {"value": ''}}
        check = False
        auth_error_message(response)

        return False

    response = api.get_balance(uid)
    if response['status']:
        balance = response['response'].json()['data']['value']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_balance', 3)
        log(response, 3)
        balance = ''
        check = False
        auth_error_message(response)

        return False

    response = api.get_name(uid)
    if response['status']:
        username = response['response'].json()['data']
    else:
        username = ''
        check = False
        auth_error_message(response)

        return False

    DB = base_g(uid)  # –û–Ω–æ –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∫–æ–ø–∏—Ä—É—é—Ç—Å—è

    if check:
        balance = str(balance).split('.')
        if len(str(balance[0])) > 3:
            balance2 = list(balance[0])
            balance2.insert(-3, "'")
            balance = ''.join(balance2) + '\.' + balance[1]
        else:
            balance = balance[0] + '\.' + balance[1]
        income = str(int(statistics["totalIncome"]["amount"]))
        if len(str(income)) > 3:
            income = list(income)
            income.insert(-3, "'")
            income = ''.join(income)

        allow_data = str(int(statistics["soldData"]["value"]))
        if len(allow_data) > 3:
            allow_data = list(allow_data)
            allow_data.insert(-3, "'")
            allow_data = ''.join(allow_data)
        allow_voice = str(int(statistics["soldVoice"]["value"]))
        if len(allow_voice) > 3:
            allow_voice = list(allow_voice)
            allow_voice.insert(-3, "'")
            allow_voice = ''.join(allow_voice)
    answer = f'üë§ *–ü—Ä–æ—Ñ–∏–ª—å\.* \n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}\!\n\n'

    answer += f'üí∞ *–ë–∞–ª–∞–Ω—Å:* _{balance}‚ÇΩ_\n'
    answer += f'‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ:* {str(allow_traffic["data"])} –ì–ë –∏ {str(allow_traffic["voice"])} –ú–ò–ù\.\n'
    answer += f'üõí *–ü—Ä–æ–¥–∞–Ω–æ:* {allow_data} –ì–ë\ –∏' \
              f' {allow_voice} –ú–ò–ù\.\n'
    answer += f'üìà *–î–æ—Ö–æ–¥:* {income}‚ÇΩ\.\n\n'
    menu.profile(call, bot, answer)


# –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞
def autosell(call, bot):
    """

    :param call:
    :param bot:
    """
    global answer
    print('\033[32m\n\033[1m\033[44m–ö–æ–º–∞–Ω–¥–∞: autosell\033[0m')
    uid = call.from_user.id
    DB = base_g(uid)

    if uid not in cache:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫—ç—à, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cache[uid] = {'status_lagg': 0, 'status_autosell': 0, 'status_autotop': 0}

    if DB:
        if DB['stage_autorize'] == 3:
            if cache[uid]['status_autosell'] == 0:
                if cache[uid]['status_lagg'] == 0:
                    count = 0
                    cache[uid]['status_autosell'] = 1
                    seller_lot = [0, 0]
                    while cache[uid]['status_autosell'] == 1:
                        if DB['config_repit'] != 0:
                            count += 1

                        lots = get_lots_refresh(call)
                        if count == 0:
                            seller_lot[0] = len(lots)
                        seller_lot[1] = len(lots)

                        check_sell(call, bot, uid, lots)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ü—Ä–æ–¥–∞–ª—Å—è –ª–∏ –ª–æ—Ç)

                        if count <= int(DB['config_repit']):
                            response = api.sell_lot(uid, def_traffic[0])
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                            if response['status']:
                                answer = '–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω\!'
                                menu.bot_launch_on(call, bot, answer, False, False)
                                time.sleep(2)
                                at = DB['config_autotime']
                                answer = '–ê–≤—Ç–æ\-–ø—Ä–æ–¥–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\!\n'

                                if int(DB['config_repit']) > 0:
                                    answer += '\n*–û—Å—Ç–∞–ª–æ—Å—å:* ' + str(
                                        int(DB['config_repit']) - count) + ' —Ä–∞–∑\(–∞\)'
                                second_text = ' —Å–µ–∫—É–Ω–¥' if (str(at)[len(at) - 1] in ('5', '6', '7', '8', '9', '0') or (
                                    str(at)[0] == '1' if len(str(at)) > 1 else False)) else (
                                    ' —Å–µ–∫—É–Ω–¥—ã' if str(at)[len(at) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')

                                answer3 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + str(
                                    at) + second_text  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
                                menu.bot_launch_on(call, bot, answer3, True, False)

                                cache[uid]['status_lagg'] = 1
                                cache[uid]['timer'] = 0
                                stop_timer[0] = False
                                while cache[uid]['timer'] < int(at):
                                    if stop_timer[0]:
                                        cache[uid]['timer'] = int(at)
                                    else:
                                        at = DB['config_autotime']
                                        time.sleep(0.85)
                                        cache[uid]['timer'] += 1
                                        ct = str(int(at) - int(cache[uid]['timer']))
                                        second_text2 = ' —Å–µ–∫—É–Ω–¥' if (str(ct)[len(ct) - 1] in (
                                            '5', '6', '7', '8', '9', '0') or (
                                                                         (True if str(at)[0] == '1' else False) if len(
                                                                             str(ct)) > 1 else False)) else (
                                            ' —Å–µ–∫—É–Ω–¥—ã' if str(ct)[len(ct) - 1] in (
                                                '2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')
                                        answer2 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + ct + second_text2  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
                                        menu.bot_launch_on(call, bot, answer2, True, False)
                                cache[uid]['status_lagg'] = 0
                            else:
                                if '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞' == response['text']:
                                    answer = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞\!'
                                    menu.bot_launch_on(call, bot, answer, False, False)
                                    time.sleep(2)
                                    stop(call, bot)
                                elif '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response['text']:
                                    answer = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\! \n–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ\.'
                                    menu.error(call, bot, answer)
                                else:
                                    menu.error(call, bot)
                                break

                        else:
                            answer = f'–ê–≤—Ç–æ\-–ø—Ä–æ–¥–∞–∂–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\!'
                            answer += f'\n–ü—Ä–æ–¥–∞–Ω–æ: {seller_lot[0] - seller_lot[1]} –ª–æ—Ç–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å\.'
                            menu.bot_launch_on(call, bot, answer, False, False)
                            stop(call, bot)
                            break
                else:
                    answer = '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–æ\! cache[uid][\'status_lagg\'] = 1'
                    log(answer, 3)
            else:
                answer = '–¶–∏–∫–ª –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω\! cache[uid][\'status_autosell\'] = 1'
                log(answer, 3)
        else:
            answer = '–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /start'
            log('autosell', '\033[31m' + answer + '\033[0m')
            deauth(call, bot, True)
    else:
        answer = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /start'
        log(answer, 3)
        deauth(call, bot, True)


# –ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ
def autotop(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    if uid not in cache:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫—ç—à, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cache[uid] = {'status_lagg': 0, 'status_autosell': 0, 'status_autotop': 0}
    if DB:
        if DB['stage_autorize'] == 3:
            if cache[uid]['status_autotop'] == 0:
                if cache[uid]['status_lagg'] == 0:
                    cache[uid]['status_autotop'] = 1
                    count = 0
                    seller_lot = [0, 0]

                    while cache[uid]['status_autotop'] == 1:
                        lots = get_lots_refresh(call)

                        check_sell(call, bot, uid, lots)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ü—Ä–æ–¥–∞–ª—Å—è –ª–∏ –ª–æ—Ç)

                        if count == 0:
                            seller_lot[0] = len(lots)
                        seller_lot[1] = len(lots)

                        if len(lots) > 0:
                            rand_id = random.randint(0, len(lots) - 1)
                            lot_id = lots[f'{rand_id}']['id']

                            if not lots[str(rand_id)]['status']:
                                if lots[str(rand_id)]['status'] != 'revoked':
                                    if DB['config_repit'] != 0:
                                        count += 1
                                    if count <= int(DB['config_repit']):
                                        response = api.top(uid, lot_id)
                                        if response['status']:
                                            answer_lot = functions.text_lot(lots, f'{rand_id}')

                                            answer = f'–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø\:\n\n{answer_lot}'
                                            log('–õ–æ—Ç –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø!', 1)
                                            menu.bot_launch_on(call, bot, answer, False, False)
                                            time.sleep(2)

                                            at = DB['config_autotime']
                                            answer = '–ê–≤—Ç–æ\-–ø–æ–¥–Ω—è—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\!\n'
                                            if int(DB['config_repit']) > 0:
                                                answer += '\n*–û—Å—Ç–∞–ª–æ—Å—å:* ' + str(
                                                    int(DB['config_repit']) - count) + ' —Ä–∞–∑\(–∞\)'
                                            second_text = ' —Å–µ–∫—É–Ω–¥' if (
                                                    str(at)[len(at) - 1] in ('5', '6', '7', '8', '9', '0') or (
                                                str(at)[0] == '1' if len(str(at)) > 1 else False)) else (
                                                ' —Å–µ–∫—É–Ω–¥—ã' if str(at)[len(at) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')
                                            answer3 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + str(
                                                at) + second_text  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
                                            menu.bot_launch_on(call, bot, answer3, True, False)
                                            cache[uid]['status_lagg'] = 1
                                            cache[uid]['timer'] = 0
                                            stop_timer[0] = False
                                            while cache[uid]['timer'] < int(at):
                                                if stop_timer[0]:
                                                    cache[uid]['timer'] = int(at)
                                                else:
                                                    time.sleep(0.85)
                                                    cache[uid]['timer'] += 1
                                                    ct = str(int(at) - int(cache[uid]['timer']))
                                                    second_text2 = ' —Å–µ–∫—É–Ω–¥' if (str(ct)[len(ct) - 1] in (
                                                        '5', '6', '7', '8', '9', '0') or ((True if str(at)[
                                                                                                       0] == '1' else False) if len(
                                                        str(ct)) > 1 else False)) else (
                                                        ' —Å–µ–∫—É–Ω–¥—ã' if str(ct)[len(ct) - 1] in (
                                                            '2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')
                                                    answer2 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + ct + second_text2  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
                                                    menu.bot_launch_on(call, bot, answer2, True, False)
                                            cache[uid]['timer'] = 0
                                            cache[uid]['status_lagg'] = 0
                                        else:
                                            if '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response['text']:
                                                answer = '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\! \n–í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç –∑–∞–Ω–æ–≤–æ\.'
                                                menu.error(call, bot, answer)
                                                break
                                            else:
                                                answer = '–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω\!' if 'is not in ACTIVE status.' in str(
                                                    response['text']) else str(response['text'])
                                                log(answer, 3)
                                                menu.bot_launch_on(call, bot, answer, False, False)
                                                time.sleep(2)
                                    else:
                                        answer = f'–ê–≤—Ç–æ\-–ø–æ–¥–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\!'
                                        answer += f'\n–ü—Ä–æ–¥–∞–Ω–æ: {seller_lot[0] - seller_lot[1]} –ª–æ—Ç–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å\.'
                                        log(answer, 1)
                                        menu.bot_launch_on(call, bot, answer, False, True)
                                        stop(call, bot)
                                        break
                                else:
                                    answer = f'–ü–æ–ø–∞–ª—Å—è —É–¥–∞–ª—ë–Ω–Ω—ã–π –ª–æ—Ç\!'
                                    log(answer, 3)
                                    menu.bot_launch_on(call, bot, answer, False, False)
                            else:
                                answer = f'–ü–æ–ø–∞–ª—Å—è –ª–æ—Ç –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è —É–∂–µ –≤ —Ç–æ–ø–µ\!'
                                log(answer, 3)
                                menu.bot_launch_on(call, bot, answer, False, False)
                        else:
                            answer = f'–õ–æ—Ç–æ–≤ –Ω–µ—Ç\!\n\n'
                            log(answer, 3)
                            menu.bot_launch_on(call, bot, answer, False, False)
                            stop(call, bot)
                            break
                else:
                    answer = '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–æ\! cache[uid][\'status_lagg\'] = 1'
                    log(answer, 3)
            else:
                answer = '–¶–∏–∫–ª –∞–≤—Ç–æ—Ç–æ–ø–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω\! cache[uid][\'status_autotop\'] = 1'
                log(answer, 3)
        else:
            answer = '–í—ã –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é\! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /auth'
            log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 3)
            deauth(call, bot, False)
    else:
        answer = '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /auth'
        log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', 3)
        deauth(call, bot, False)


# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
def stop(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    if uid in cache:
        cache[uid]['status_autotop'] = 0
        cache[uid]['status_autosell'] = 0
        stop_timer[0] = True
        DB = base_g(uid)
        time.sleep(1.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        response = api.get_lots(uid)
        if response['status']:
            base_u({'id': uid, 'list_lots': json.dumps(response['active_traffic'])})  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤
        else:
            log(response['text'], 3)
    menu.home(call, bot)


def remove_minutes_lots_confrim(call, bot):
    """

    :param call:
    :param bot:
    """
    answer = '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã —Å –º–∏–Ω—É—Ç–∞–º–∏\?\n–û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è\!'
    menu.remove_minutes_lots_confrim(call, bot, answer)


def remove_minutes_lots(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id
    minutes = get_lots_refresh(call, delete_minutes=True)
    filtered_minutes = []
    for i in minutes:
        if minutes[i]['type'] == 'min':
            lid = minutes[i]['id']
            filtered_minutes.append(minutes[i]['id'])
            api.delete(uid, lid)
    if len(filtered_minutes) > 0:
        answer = '–í—Å–µ –ª–æ—Ç—ã —Å –º–∏–Ω—É—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã\!'
    else:
        answer = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –º–∏–Ω—É—Ç–∞–º–∏ –Ω–µ—Ç\!'

    menu.remove_minutes_lots(call, bot, answer)
    time.sleep(3)
    menu.home(call, bot)


def update_def_traffic(call):
    """

    :param call:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    def_traffic[0]['volume']['value'] = DB["config_count"]
    def_traffic[0]['volume']['uom'] = DB['config_uom']
    def_traffic[0]['cost']['amount'] = DB["config_price"]
    def_traffic[0]['trafficType'] = DB["config_type"]


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
def get_lots_refresh(call, delete_minutes=False):
    """

    :param call:
    :param delete_minutes:
    :return:
    """
    uid = call.from_user.id
    response = api.get_lots(uid)
    if response['status']:
        base_u({'id': uid, 'list_lots': json.dumps(response['response'].json()['data'])})
    base_u({'id': uid, 'list_lots': json.dumps(api.get_lots(uid)['active_traffic'])})
    DB = base_g(uid)

    all_lots = json.loads(DB['list_lots'])
    lots = {}
    i = 0
    if delete_minutes:
        for obj in all_lots:
            if all_lots[obj]['type'] == 'min':
                lots[i] = all_lots[obj]
                i += 1
    else:
        if DB['config_type'] == 'data':  # –û—Ç—Å–µ–∏–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
            for obj in all_lots:
                if all_lots[obj]['type'] == 'gb':
                    lots[str(i)] = all_lots[obj]
                    i += 1
        elif DB['config_type'] == 'volume':
            for obj in all_lots:
                if all_lots[obj]['type'] == 'min':
                    lots[i] = all_lots[obj]
                    i += 1
        else:
            lots = all_lots
    return lots


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ª–æ—Ç–∞
def check_sell(call, bot, uid, lots):
    """

    :param call:
    :param bot:
    :param uid:
    :param lots:
    """
    if uid in cache_lot:
        if len(lots) < len(cache_lot[uid]):
            answer = f'–õ–æ—Ç –ø—Ä–æ–¥–∞–Ω\!'
            menu.bot_launch_on(call, bot, answer, False, True)
            time.sleep(3)

    cache_lot[uid] = lots


def send_sms(call):
    """

    :param call:
    """
    uid = call.from_user.id
    base_u({'id': uid, 'status_sms': 1, 'lvl_autorize': 1})
    api.send_sms(uid)


def delete_confrim(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    lots = json.loads(DB['list_lots'])
    menu.delete_confrim(call, bot, lid, lots)


def delete_yes(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    uid = call.from_user.id
    api.delete(uid, lid)
    answer = '–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\!'
    markup = types.InlineKeyboardMarkup(row_width=2)
    menu.reload(call, bot, answer, markup)
    time.sleep(1)
    profile(call, bot)


def edit_lots(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id
    response = api.get_lots(uid)
    if response['status']:
        base_u({'id': uid, 'list_lots': json.dumps(response['active_traffic'])})
    DB = base_g(uid)
    lots = json.loads(DB['list_lots'])
    menu.edit_lots(call, bot, lots)


def redactor_lot(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    uid = call.from_user.id
    if uid not in cache:
        cache[uid] = {'status_lagg': 0, 'status_autosell': 0, 'status_autotop': 0}
    cache[uid]['lid'] = lid

    response = api.get_lots(uid)
    if response['status']:
        base_u({'id': uid, 'list_lots': json.dumps(response['active_traffic'])})
    DB = base_g(uid)
    lots = json.loads(DB['list_lots'])
    menu.redactor_lot(call, bot, lid, lots)


def top(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    uid = call.from_user.id
    DB = base_g(uid)
    lots = dict(json.loads(DB['list_lots']))
    response = api.top(uid, lid)
    lot = {}
    if response['status']:
        for i in lots:
            lot[0] = i
            if lots[i]['id'] == lid:
                break
        answer_lot = functions.text_lot(lots, lot[0])

        answer = f'–õ–æ—Ç "{answer_lot}" \n\- —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø\!'
        log(answer, 1)
        bot.send_message(call.message.chat.id, answer, parse_mode='MarkdownV2')
        time.sleep(2)
        redactor_lot(call, bot, lid)


def name(call, bot, lid):
    pass


def price(call, bot):
    """

    :param call:
    :param bot:
    """
    menu.price(call, bot)
    uid = call.from_user.id
    base_u({'id': uid, 'lvl_redactor': 1})


def price_accept(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id
    data = call.data

    lid = cache[uid]['lid']
    lots = dict(json.loads(base_g(uid)['list_lots']))
    lot = {}

    for i in lots:
        lot[0] = i
        if lots[i]['id'] == lid:
            break

    price = str(int(data))
    emoji = lots[lot[0]]["emojis"]
    name = True if lots[lot[0]]['name'] != None else False
    data = (name, emoji, price)
    api.rename(uid, lots[lot[0]], data)
    lots = json.loads(base_g(uid)['list_lots'])
    time.sleep(3)
    redactor_lot(call, bot, lid)


def emoji(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    menu.emoji(call, bot, lid)
    uid = call.from_user.id
    base_u({'id': uid, 'lvl_redactor': 2})


def save(call, bot, lid):
    """

    :param call:
    :param bot:
    :param lid:
    """
    pass


def up(call, bot):
    """

    :param call:
    :param bot:
    """
    uid = call.from_user.id

    lots = get_lots_refresh(call)
    rand_id = random.randint(0, len(lots) - 1)
    lot_id = lots[f'{rand_id}']['id']

    api.top(uid, lot_id)
    menu.up(call, bot)
