"""
    –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –¢–ì –±–æ—Ç–∞
"""
import json
import time
import re
from json import JSONDecodeError

from telebot import types
from telebot.apihelper import ApiTelegramException

from bot import bot
from general_func import t2b
from log import log
from constants import ADMIN_IDS

ids_messages = {}  # –°–ø–∏—Å–æ–∫ ID —Å–æ–æ–±—â–µ–Ω–∏–π
i = 0  # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—ã–¥–∞—Ç—å –æ—à–∏–±–∫—É, —Ñ—É–Ω–∫—Ü–∏—è error()
cancel_btn = ('‚ùå –û—Ç–º–µ–Ω–∞', '–û—Ç–º–µ–Ω–∞')

admin_ids = ADMIN_IDS


def escape_markdown_v2(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏–∑–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Telegram Markdown V2 –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ.
    :param text: –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    :return: –≠–∫—Ä–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    """

    escape_chars = r'_*[]()~`>#+-=|{}.!'
    result = re.sub(r'(?<!\\)([%s])' % re.escape(escape_chars), r'\\\1', str(text))

    return result


def clear_messages(uid, mid):
    """
    –û—á–∏—Å—Ç–∫–∞ –æ—Ç –∑–∞—Ö–ª–∞–º–ª—è—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    :param mid: Id —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    :return:
    """
    with open('data/ids_messages.json') as file:
        try:
            file = json.load(file)
            if 'ids' in file:
                ids = file['ids']
            else:
                file['ids'] = []
                ids = file['ids']
        except JSONDecodeError:
            file = {'ids': []}
        print(f'MID: {mid}')
        print(f'–ù–∞—á–∞–ª—å–Ω—ã–π ids: {ids}')
        if len(ids) > 1:
            for i in ids:
                print(f'–î–µ–ª–∞–µ—Ç—Å—è: {i}')
                try:
                    if i != mid:
                        bot.delete_message(chat_id=uid, message_id=(i))
                except:
                    pass
                ids.remove(i)
        if 0 in ids:
            ids.remove(0)
        print(f'–ò—Ç–æ–≥–æ–≤—ã–π ids: {ids}')

        if mid not in ids:
            with open('data/ids_messages.json', 'w') as file_w:
                file['ids'] = ids
                file['ids'].append(mid)
                json.dump(file, file_w)


# noinspection PyBroadException
def send(call, answer: str, btns: tuple, row_width: int = 3, edit_message: int = 1):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    :param edit_message: –°—Ç–∞—Ç—É—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1.
    :param row_width: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ.
    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param answer: –¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param btns: –ö–æ—Ä—Ç–µ–∂ —Å –∫–Ω–æ–ø–∫–∞–º–∏(('–¢–µ–∫—Å—Ç', '–ö–æ–º–∞–Ω–¥–∞'), ('–¢–µ–∫—Å—Ç', '–ö–æ–º–∞–Ω–¥–∞')).
    """
    status_edit = True
    status_mark = True
    uid = call.from_user.id
    mid = call.message.message_id

    btns_markup = []

    for lot in btns:  # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
        btns_markup.append(types.InlineKeyboardButton(text=lot[0], callback_data=lot[1]))

    markup = types.InlineKeyboardMarkup(row_width=row_width)  # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
    markup.add(*btns_markup)  # –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–∫–∞–º–∏

    clear_messages(uid, mid)

    send = lambda: bot.send_message(chat_id=uid, text=answer, reply_markup=markup, parse_mode='MarkdownV2')
    edit = lambda: bot.edit_message_text(chat_id=uid, text=answer, message_id=mid, reply_markup=markup,
                                         parse_mode='MarkdownV2')
    send_mark = lambda: bot.send_message(chat_id=uid, text=escape_markdown_v2(answer), reply_markup=markup,
                                         parse_mode='MarkdownV2')
    edit_mark = lambda: bot.edit_message_text(chat_id=uid, text=escape_markdown_v2(answer), message_id=mid,
                                              reply_markup=markup, parse_mode='MarkdownV2')
    log_mark = lambda: log(f"""–ì–¥–µ-—Ç–æ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞ markdown –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: \n{answer}\n
    –ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É —Å—Ä–∞–≤–Ω–∏–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º: \n{escape_markdown_v2(answer),}\n""", 3)

    if edit_message:
        try:
            edit()
        except ApiTelegramException as E:
            if 'is reserved and must be escaped with the preceding' in str(E):
                try:
                    edit_mark()
                except ApiTelegramException as E2:
                    if 'message to edit not found' in str(E2):
                        send_mark()
                    else:
                        log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')
            elif 'message to edit not found' in str(E):
                send()
    else:
        try:
            send()
        except ApiTelegramException as E:
            if 'is reserved and must be escaped with the preceding' in str(E):
                send_mark()
            else:
                log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.')


# noinspection PyBroadException
def wait(call):
    """
    –°–æ–∑–¥–∞—ë—Ç —Å–º–∞–π–ª–∏–∫ —Å –ø–µ—Å–æ—á–Ω—ã–º–∏ —á–∞—Å–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π—Å—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    global new_message

    new_message = 1
    answer = '‚åõ'
    btns = (cancel_btn,)
    response = send(call, answer, btns)

    return response


def error(call, answer: str = r'–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\!' + '\n' + r'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑\.'):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param answer: –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ. (–ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """

    btns = (('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'), ('üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'))

    response = send(call, answer, btns)

    return response


def start(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    row_width = 2

    if call.from_user.id in admin_ids:
        admin_menu(call)
        return
    else:
        answer = r"""–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ 
        —Ç—Ä–∞—Ñ–∏–∫–∞ –¢–µ–ª–µ2\! –í –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å 
        —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\!"""

        btns = (('üîë –í–æ–π—Ç–∏', '–í–æ–π—Ç–∏'),)

    response = send(call, answer, btns, row_width)

    return response


def home(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –≥–ª–∞–≤–Ω—ã–º —ç–∫—Ä–∞–Ω–æ–º.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    # raise Exception('–ö–∞–∫–æ–≥–æ —Ö—É—è –¥–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!')
    row_width = 2
    btns = (
        ('üü¢ –ó–∞–ø—É—Å–∫', '–ó–∞–ø—É—Å–∫'), ('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–ü—Ä–æ—Ñ–∏–ª—å'), ('üü¢ –ü–æ–¥–Ω—è—Ç—å', '–ü–æ–¥–Ω—è—Ç—å'), ('üõ†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))

    answer = r"""üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\!* 
    
    –¢—É—Ç –º–æ–∂–Ω–æ: 
    *1\.* –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
    *2\.* –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    *3\.* –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\!"""
    response = send(call, answer, btns, row_width)

    return response


def help_create(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    answer = """
    ['/start', '/deauth', '/unauthorize'] - –ö–æ–º–∞–Ω–¥—ã –≤—ã–ø–æ–ª–Ω—è—Ç –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑ –¢2 –∞–∫–∫–∞—É–Ω—Ç–∞.
    ['stop', 'exit'] - –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤—è—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞.
    '/send_price' - –ó–∞–ø—É—Å—Ç–∏—Ç –ø—Ä–∏—ë–º–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤.
    '/help' - –ö–∞–∫ –≤—ã —É–∂–µ –∑–∞–º–µ—Ç–∏–ª–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    markup = types.InlineKeyboardMarkup()
    bot.send_message(call.message.chat.id, answer, reply_markup=markup, parse_mode='MarkdownV2')
    return True


def admin_login(call):
    row_width = 2
    uid = call.from_user.id  # type: ignore
    from T2.session_manager import get_api
    api = get_api(uid)

    stage_authorize = t2b(uid)['stage_authorize']
    if stage_authorize >= 3:

        lots = api.get_active_lots()
        if lots:
            response = home(call)
        else:
            response = api.refresh_tokens()
            if response:
                home(call)
            else:
                answer = '–ü—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ –Ω–æ–≤–æ–π!'
                response = send(call, answer, ())
                t2b(uid, type_='d')
                time.sleep(3)
                admin_menu(call)
    else:
        answer = r"""–ü—Ä–∏–≤–µ—Ç –î–∏–º–∞\!
        
        –£ —Ç–µ–±—è –µ—Å—Ç—å 1 –∞–∫–∫–∞—É–Ω—Ç\.
        –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö:"""
        btns = (('üì≤ +7(992)022-88-48', '–í–æ–π—Ç–∏ –∞–¥–º–∏–Ω'), ('üîë –î—Ä—É–≥–æ–π –∞–∫–∫–∞—É–Ω—Ç', '–í–æ–π—Ç–∏'))
        response = send(call, answer, btns, row_width)

    return response


def admin_menu(call, new_message_=0):
    """

    :param call:
    :param new_message_:
    :return:
    """
    row_width = 2
    answer = '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:'
    btns = (('–ú–∞—Ä–∫–µ—Ç –¢2', '–ú–¢2'), ('–û–∂–∏–¥–∞–Ω–∏–µ —Å–Ω–∏–∂–µ–Ω–∏—è', '–û–°–¢'), ('–ü–∞—Ä—Å–∏–Ω–≥ —Ç–∞–∫—Å–∏', '–ü–¢'), ('–ü—Ä–∞–π—Å–µ—Ä', '–ü–†–°'))
    response = send(call, answer, btns, row_width, edit_message=new_message_)

    return response


def settings(call, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param answer: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.
    """

    uid = call.from_user.id
    lvl = t2b(uid)['lvl_setting']

    if lvl == 0:
        row_width = 2
        btns = (('üöß –í–∏–¥ —Ç—Ä–∞—Ñ–∏–∫–∞', '–í–∏–¥ —Ç—Ä–∞—Ñ–∏–∫–∞'), ('üìè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'), ('üïì –ò–Ω—Ç–µ—Ä–≤–∞–ª', '–ò–Ω—Ç–µ—Ä–≤–∞–ª'),
                ('üîÇ –ü–æ–≤—Ç–æ—Ä—ã', '–ü–æ–≤—Ç–æ—Ä—ã'), ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    elif 0 < lvl < 4:
        row_width = 1
        btns = (('‚Ü©Ô∏è –ù–∞–∑–∞–¥', '–ù–∞–∑–∞–¥'),)
    elif lvl == 4:
        row_width = 2
        btns = (('üåê –ì–∏–≥–∞–±–∞–π—Ç—ã', '–ì–∏–≥–∞–±–∞–π—Ç—ã'), ('‚òéÔ∏è –ú–∏–Ω—É—Ç—ã', '–ú–∏–Ω—É—Ç—ã'), ('‚Ü©Ô∏è –ù–∞–∑–∞–¥', '–ù–∞–∑–∞–¥'))
    else:
        row_width = 1
        answer = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!'
        log(f'–û—à–∏–±–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. lvl={lvl}', 3)
        btns = (cancel_btn,)

    response = send(call, answer, btns, row_width)

    return response


def profile(call, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param answer: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """

    row_width = 2
    btns = (
        ('üóëÔ∏è –ú–æ–∏ –ª–æ—Ç—ã', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'), ('üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞', '–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞'),
        ('‚Ü©Ô∏è –ù–∞–∑–∞–¥', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
    response = send(call, answer, btns, row_width)

    return response


def bot_select(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –∑–∞–ø—É—Å–∫–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    row_width = 2
    btns = (
        ('üè∑Ô∏è –ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞', '–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞'), ('üîù –ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ', '–ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ'), ('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))

    answer = r"""üü¢ *–ó–∞–ø—É—Å–∫\.* 
    
    *1\. "–ê–≤—Ç–æ\-–ø—Ä–æ–¥–∞–∂–∞":*  
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥–∞–∂–∞ 
    —Ç—Ä–∞—Ñ–∏–∫–∞\. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 
    –õ–æ—Ç \- 6 –≥–∏–≥–∞–±–∞–π—Ç\. 
    –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ \-  1 —Ä–∞–∑ –≤ 35 —Å–µ–∫—É–Ω–¥\.
    
    *2\. "–ê–≤—Ç–æ\-–ø–æ–¥–Ω—è—Ç–∏–µ":*
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–Ω—è—Ç–∏–µ 
    –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ –≤ —Ç–æ–ø\. 
    –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã, —ç—Ç–æ —Ç–µ, 
    –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã 
    –Ω–∞ –ø—Ä–æ–¥–∞–∂—É\. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 
    –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è 1 —Ä–∞–Ω–¥–æ–º–Ω—ã–π 
    –ª–æ—Ç, –∫–∞–∂–¥—ã–µ 35 —Å–µ–∫—É–Ω–¥\."""

    response = send(call, str(answer), btns, row_width)

    return response


def bot_active(call, answer, check=False, sell_check=False):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, —Å —Ç–∞–π–º–µ—Ä–æ–º.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param answer: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.
    :param check: –ü—Ä–∏ 'True' - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
    :param sell_check: –ü—Ä–∏ 'True' - –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    markup = types.InlineKeyboardMarkup()
    btns = (('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'),)
    item1 = types.InlineKeyboardButton(text='‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data='–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')

    if check:
        markup.add(item1)

    if sell_check:
        global new_message
        new_message = 1

    response = send(call, answer, btns)

    return response


def up(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –ø–æ–¥–Ω—è—Ç–∏—è –ª–æ—Ç–∞ –≤ —Ç–æ–ø.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    answer = r'–õ–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç\!'
    btns = ()

    send(call, answer, btns)
    time.sleep(3)
    response = home(call)

    return True


def get_lots(call, lots):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ª–æ—Ç–∞–º–∏.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
    """

    row_width = 2
    btns = (('üóë –û—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ –º–∏–Ω—É—Ç—ã', '–û—Ç–æ–∑–≤–∞—Ç—å –º–∏–Ω—É—Ç—ã'), ('‚ùå –û—Ç–º–µ–Ω–∞', '–ü—Ä–æ—Ñ–∏–ª—å'))
    items = []

    if len(lots) > 0:
        answer = '*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö, –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤:*'
        for lot in lots:
            print(lot)
            text = str(lot['volume']['value'])
            text += (' –ì–ë ' if lot['volume']['uom'] == 'gb' else ' –ú–ò–ù ')
            text += f'–∑–∞ {str(int(lot["cost"]['amount']))}‚ÇΩ'
            items.append(types.InlineKeyboardButton(text=f'{text}', callback_data=f'red/{lot["id"]}'))
    else:
        answer = "\n\n" + r"–õ–æ—Ç–æ–≤, –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –Ω–∞ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ—Ç\!"

    response = send(call, answer, btns, row_width)

    return response


def login_password(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:'
    btns = (('üì© –í–æ–π—Ç–∏ –ø–æ –°–ú–°', '–°–ú–°'), cancel_btn)
    response = send(call, answer, btns)

    return response


def login_number(call, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param answer: –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–µ–π—Å—Ç–≤–∏–∏.
    """

    btns = (cancel_btn,)
    response = send(call, answer, btns)

    return response


def sms(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –°–ú–° —Å –∫–æ–¥–æ–º –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    answer = r'–°–º—Å –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—é–¥–∞\:'

    btns = (cancel_btn,)
    response = send(call, answer, btns)

    return response


def security_code(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ –ø–æ—á—Ç—É.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    answer = r'–ù–∞ –ø–æ—á—Ç—É –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥\! –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞:'
    on_sms = ('–í–æ–π—Ç–∏ –ø–æ —Å–º—Å', '–°–ú–°')
    btns = (cancel_btn, on_sms)
    response = send(call, answer, btns)

    return response


def delete_confirm(call, lid, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Å–Ω—è—Ç–∏–∏ –ª–æ—Ç–∞ —Å –ø—Ä–æ–¥–∞–∂–∏.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param lid: ID –ª–æ—Ç–∞.
    :param answer: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.
    """

    row_width = 2
    btns = (('üóëÔ∏è –î–∞', f'delconf/{lid}'), ('‚ùå –ù–µ—Ç', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'))
    response = send(call, answer, btns, row_width)

    return response


def redactor_lot(call, lid, lots):
    """
    –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid: ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞
    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
    """

    row_width = 2

    lot_text = ''
    ind = {}

    from general_func import text_lot

    for lot in lots:
        lot_text = text_lot(lots, lot)
        if lots[lot]['id'] == lid:
            ind[0] = lot
            break

    answer = f'*–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ—Ç–∞:* \n\n{lot_text}'
    btns = (('‚Ü©Ô∏è –í —Ç–æ–ø', 'top'), ('‚Ü©Ô∏è –°–º–∞–π–ª–∏–∫–∏', 'emoji'), ('‚Ü©Ô∏è –¶–µ–Ω–∞', 'price'), ('‚Ü©Ô∏è –ò–º—è', 'name'),
            ('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–æ—Ç', 'del'), ('‚Ü©Ô∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', 'save'), ('‚Ü©Ô∏è –ù–∞–∑–∞–¥', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'))

    response = send(call, answer, btns, row_width)

    return response


def emoji(call, lots):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lots:
    """

    emoji_cymbol = {'bomb': 'üí£', 'cat': 'üò∏', 'cool': 'üòé', 'devil': 'üòà', 'rich': 'ü§ë', 'scream': 'üò±',
                    'tongue': 'üòõ', 'zipped': 'ü§ê'}
    emojis = ''
    i_ = 0  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è (–¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–∏–∫–ª –∫–∞–∫–æ–π-—Ç–æ)

    for emoji_text in lots[i_]['emojis']:
        emojis += emoji_cymbol[emoji_text]

    row_width = 2
    btns = (('‚ùå –û—Ç–º–µ–Ω–∞', '–ü—Ä–æ—Ñ–∏–ª—å'),)
    answer = ''
    response = send(call, answer, btns, row_width)

    return response


def name(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–º—è –∏–ª–∏ –Ω–µ—Ç.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    row_width = 2

    btns = (('–î–∞', '–ò–º—è –î–∞'), ('–ù–µ—Ç', '–ò–º—è –ù–µ—Ç'), ('‚ùå –û—Ç–º–µ–Ω–∞', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'))
    answer = r'–í—ã–±–µ—Ä–∏—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∏–º—è, –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∏–ª–∏ –Ω–µ—Ç\?:'

    response = send(call, answer, btns, row_width)

    return response


# noinspection PyUnusedLocal
def save(call, lid):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid:
    """
    pass


def price(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞.
    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    btns = (('‚ùå –û—Ç–º–µ–Ω–∞', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'),)
    answer = '–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ª–æ—Ç–∞:'

    response = send(call, answer, btns)

    return response


def remove_minutes_lots_confirm(call):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –æ—Ç–∑—ã–≤–∞ –º–∏–Ω—É—Ç.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    answer = r'–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–æ–∑–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã —Å –º–∏–Ω—É—Ç–∞–º–∏\?' + '\n' + r'–û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è\!'

    row_width = 2
    btns = (('üóë –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∑—ã–≤', '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –º–∏–Ω—É—Ç'), ('‚ùå –û—Ç–º–µ–Ω–∞', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ—Ç—ã'))

    response = send(call, answer, btns, row_width)

    return response


def remove_minutes_lots(call, answer):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–∏–Ω—É—Ç.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param answer: –¢–µ–∫—Å—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """

    btns = ()
    response = send(call, answer, btns)

    return response
