"""
    –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¢2 –±–æ—Ç–∞
"""

import json
import math
import random
import time

from tg_bot import bot
from T2 import config, menu
from T2.api import T2Api as api

from preset import t2b, text_lot
from log import log
from constants import NUMBER_T2, PASSWORD_T2, SECRET_FORMAT_NUMBER_T2

def_account = config.account
def_traffic = config.add_traffic()
cache = {}
cache_lot = {}
stop_timer = [False]


def auth(call):
    """
    –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
    
    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :return: –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.
    """

    uid = call.from_user.id
    DB = t2b(uid)
    data = call.data

    print(DB['stage_authorize'])
    print(DB['status_sms'])

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    if DB['stage_authorize'] < 3:
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if data[0] == '8':
            data = '7'.join(data.split('8'))
        elif data[0] == '+' and data[1] == '7':
            data = '7'.join(data.split('+7'))

        # 1 –≠—Ç–∞–ø - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω)
        if len(str(data)) == 11 and (data[0] == '7') and data[1] == '9' and DB['stage_authorize'] == 0:
            data_upd = {'auth_login': data, 'stage_authorize': 1}
            t2b(uid, data_upd, 'u')
            res = menu.login_password(call)
            return 1

        # 1 –≠—Ç–∞–ø - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:
        elif DB['stage_authorize'] == 0:
            answer = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, \n–≤ —Ñ–æ—Ä–º–∞—Ç–µ: [79000000000]'
            res = menu.login_number(call, answer)
            return 1

        # 2 –≠—Ç–∞–ø - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        elif DB['stage_authorize'] == 1:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–¥–æ–º:
            if DB['status_sms'] == 0:
                # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω:
                if len(str(DB['auth_password'])) == 0 or DB['auth_password'] is None:
                    data_upd = {'auth_password': data, 'security_code': ''}
                    t2b(uid, data_upd, 'u')

                response = api.security_code(uid)
                print('—Ö—É–π')
                print(response)

                # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞:
                if response['status']:
                    data_upd = {'stage_authorize': 2, 'auth_password': DB['auth_password'],
                                'security_code_token': response['response'].json()['security_code_token']}
                    t2b(uid, data_upd, 'u')
                    res = menu.security_code(call)
                    return 1
            else:
                response = api.send_sms(uid)
                print('–û–¢–ü–†–ê–í–õ–û–ï–ù–û –°–ú–°')
                print(response)
                data_upd = {'stage_authorize': 2}
                t2b(uid, data_upd, 'u')


        # 3 –≠—Ç–∞–ø - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
        elif DB['stage_authorize'] == 2:
            response = api.auth(uid)

            # –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:
            if response['status']:
                data_upd = {'stage_authorize': 3, 'status_sms': 0}

                cache[uid] = {'status_run_auto': 0, 'status_lagg': 0}
                t2b(uid, data_upd, 'u')
                update_def_traffic(call)
                return 2

            # –ü—Ä–∏ –Ω–µ—É–¥–∞—á–µ - –≤–æ–∑–≤—Ä–∞—Ç –∫ 1 —ç—Ç–∞–ø—É:
            else:
                t2b(uid, type_='d')
                t2b(uid)
                answer = '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞\!' \
                         '\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [79000000000]'
                log(f'–ü—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. \n {response}', 3)
                menu.login_number(call, answer)
                return 0

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.
    else:
        answer = '–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã\!'
        log(answer, 3)
        return 2


def admin_auth(call):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :return: Bool –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """

    # deauth(call)
    uid = call.from_user.id
    DB = t2b(uid)
    data = call.data

    # deauth(call)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞:
    if DB is None:
        log('–°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞')
        t2b(uid)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ SECRET_FORMAT_NUMBER_T2
    if data == '–í–æ–π—Ç–∏ –∞–¥–º–∏–Ω':
        log(f'–í—Ö–æ–¥ –≤ {SECRET_FORMAT_NUMBER_T2}')
        data_upd = {'stage_authorize': 1, 'auth_login': NUMBER_T2, 'auth_password': PASSWORD_T2}
        t2b(uid, data_upd, 'u')
        response = auth(call)
        return response


def deauth(call, lobby=False):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param lobby: –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ª–æ–±–±–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è start.
    :return: Boolean –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã.
    """
    try:
        uid = call.from_user.id
        DB = t2b(uid)

        if DB:
            t2b(uid, type_='d')

        if lobby:
            menu.start(call.message)

        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.')
        return True

    except KeyError:
        log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!', 3)
        return False


def home_menu(call):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    uid = call.from_user.id
    cache[uid] = {'status_run_auto': 0, 'status_lagg': 0}
    return True


# –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
def settings(call):
    """
    –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :return: Boolean –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã.
    """

    uid = call.from_user.id
    DB = t2b(uid)
    data = call.data

    config_uom = DB['config_uom']
    if DB['lvl_setting'] == 0:
        name_ = ("üåê *–í–∏–¥:* –ì–∏–≥–∞–±–∞–π—Ç—ã" if DB['config_uom'] == "gb" else "‚òéÔ∏è *–í–∏–¥:* –ú–∏–Ω—É—Ç—ã")
        name2 = ("–ì–ë" if DB['config_uom'] == "gb" else "–ú–ò–ù")
        answer = f'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–¢–µ–∫—É—â–∏–µ: \n{name_}\. ' \
                 f'\nüìè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {DB["config_count"]}{name2} –∑–∞ {DB["config_price"]}‚ÇΩ' \
                 f'\nüïì *–ò–Ω—Ç–µ—Ä–≤–∞–ª:* {DB["config_autotime"]} —Å–µ–∫—É–Ω–¥\.' \
                 f'\nüîÇ *–ü–æ–≤—Ç–æ—Ä—ã:* {DB["config_repeat"]} —Ä–∞–∑\(–∞\)\.'
        res = menu.settings(call, answer)
        return res
    elif DB['lvl_setting'] == 1:
        try:
            int(data)
            data_upd = {'config_autotime': call.message.text}
            t2b(uid, data_upd, 'u')
            return True
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5'
            menu.settings(call, answer)
            return False
    elif DB['lvl_setting'] == 2:
        try:
            config_price = int(data)
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã.'
            menu.settings(call, answer)
            return False

        data_upd = {'config_count': data, 'config_price': math.ceil(config_price * 15) if config_uom == 'gb' else
        {'config_count': data, 'config_price': math.ceil(int(data) / 1.25) if config_uom == 'min' else None}}

        t2b(uid, data_upd, 'u')

        return True

    elif DB['lvl_setting'] == 3:
        try:
            int(data)
            data_upd = {'config_repeat': call.message.text}
            t2b(uid, data_upd, 'u')
            return True
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏–ª–∏ ' \
                     '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. –£–∫–∞–∑–∞–≤ 0, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±—É–¥—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10'
            menu.settings(call, answer)
            return False
    elif DB['lvl_setting'] == 4:
        if data == '–ú–∏–Ω—É—Ç—ã':
            data_upd = {'config_type': 'voice', 'config_count': 62, 'config_price': 50, 'config_uom': 'min'}
            t2b(uid, data_upd, 'u')
            return True
        elif data == '–ì–∏–≥–∞–±–∞–π—Ç—ã':
            data_upd = {'config_type': 'data', 'config_count': 6, 'config_price': 90, 'config_uom': 'gb'}
            t2b(uid, data_upd, 'u')
            return True
        else:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞:'
            menu.settings(call, answer)
            return True


def profile(call):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :return: bool –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã.
    """

    allow_voice = None
    allow_data = None
    income = None
    check = True

    uid = call.from_user.id
    response = api.get_rests(uid)

    def auth_error_message(response_):  # –í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """

        :param response_:
        """

        if '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response_['text']:
            from tg_bot import start
            start(call.message)
            return False
        else:
            menu.error(call)
            return False

    if response['status']:
        allow_traffic = response['rests']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_rests', 3)
        log(response, 3)
        auth_error_message(response)

        return False

    response = api.get_statistics(uid)

    if response['status']:
        statistics = response['response'].json()['data']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_statistics', 3)
        log(response, 3)
        auth_error_message(response)

        return False

    response = api.get_balance(uid)

    if response['status']:
        balance = response['response'].json()['data']['value']
    else:
        log('‚ùå –û—à–∏–±–∫–∞ response –≤ —Ñ—É–Ω–∫—Ü–∏–∏ profile —Ñ–∞–π–ª–∞ commands - get_balance', 3)
        log(response, 3)
        auth_error_message(response)

        return False

    response = api.get_name(uid)

    if response['status']:
        username = response['response'].json()['data']
    else:
        auth_error_message(response)

        return False

    t2b(uid)  # –û–Ω–æ –∑–¥–µ—Å—å, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –∫–æ–ø–∏—Ä—É—é—Ç—Å—è

    if check:
        balance = str(balance).split('.')
        if len(str(balance[0])) > 3:
            balance2 = list(balance[0])
            balance2.insert(-3, "'")
            balance = ''.join(balance2) + '\.' + balance[1]
        else:
            balance = balance[0] + '\.' + balance[1]

        income = str(int(statistics["totalIncome"]["amount"]))

        if len(str(income)) > 3:
            income = list(income)
            income.insert(-3, "'")
            income = ''.join(income)

        allow_data = str(int(statistics["soldData"]["value"]))

        if len(allow_data) > 3:
            allow_data = list(allow_data)
            allow_data.insert(-3, "'")
            allow_data = ''.join(allow_data)

        allow_voice = str(int(statistics["soldVoice"]["value"]))

        if len(allow_voice) > 3:
            allow_voice = list(allow_voice)
            allow_voice.insert(-3, "'")
            allow_voice = ''.join(allow_voice)

    answer = f'üë§ *–ü—Ä–æ—Ñ–∏–ª—å\.* \n\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}\!\n\n'

    answer += f'üí∞ *–ë–∞–ª–∞–Ω—Å:* _{balance}‚ÇΩ_\n'
    answer += f'‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ:* {allow_traffic["data"]} –ì–ë –∏ {allow_traffic["voice"]} –ú–ò–ù\.\n'
    answer += f'üõí *–ü—Ä–æ–¥–∞–Ω–æ:* {allow_data} –ì–ë\ –∏' \
              f' {allow_voice} –ú–ò–ù\.\n'
    answer += f'üìà *–î–æ—Ö–æ–¥:* {income}‚ÇΩ\.\n\n'
    res = answer
    return res


def timer(answer, at, count, uid, call, DB):
    """
    –†–∞–±–æ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

    :param DB: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    :param answer: –¢–µ–∫—Å—Ç
    :param at: –í—Ä–µ–º—è
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    rand_time = random.randint(0, 5)  # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    at += rand_time

    if DB['config_repeat'] > 0:
        answer += '\n*–û—Å—Ç–∞–ª–æ—Å—å:* ' + str(
            DB['config_repeat'] - count) + ' —Ä–∞–∑\(–∞\)'
    second_text = ' —Å–µ–∫—É–Ω–¥' if (str(at)[len(str(at)) - 1] in ('5', '6', '7', '8', '9', '0')
                                or (str(at)[0] == '1' if len(str(at)) > 1 else False)) \
        else (' —Å–µ–∫—É–Ω–¥—ã' if str(at)[len(str(at)) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')

    answer3 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + str(
        at) + second_text  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    menu.bot_active(call, answer3, True)

    cache[uid]['status_lagg'] = 1
    cache[uid]['timer'] = 0
    stop_timer[0] = False
    while cache[uid]['timer'] < int(at):
        if stop_timer[0]:
            cache[uid]['timer'] = int(at)
        else:
            at = DB['config_autotime']
            time.sleep(0.85)
            cache[uid]['timer'] += 1
            ct = str(int(at) - int(cache[uid]['timer']))
            second_text2 = ' —Å–µ–∫—É–Ω–¥' if (str(ct)[len(ct) - 1] in ('5', '6', '7', '8', '9', '0')
                                         or ((True if str(at)[0] == '1' else False) if len(str(ct)) > 1 else False)) \
                else (' —Å–µ–∫—É–Ω–¥—ã' if str(ct)[len(ct) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')
            answer2 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + ct + second_text2  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            menu.bot_active(call, answer2, True)
    cache[uid]['timer'] = 0
    cache[uid]['status_lagg'] = 0


def run_auto(call, type_=''):
    """
    –ó–∞–ø—É—Å–∫ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param type_: –¢–∏–ø —Ä–∞–±–æ—Ç—ã ('sell' - –ø—Ä–æ–¥–∞–∂–∞, 'top' - –ø–æ–¥–Ω—è—Ç–∏–µ).
    """

    uid = call.from_user.id
    DB = t2b(uid)

    if uid not in cache:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –∫—ç—à, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        cache[uid] = {'status_lagg': 0, 'status_run_auto': 0}

    if DB and DB['stage_authorize'] == 3 and cache[uid]['status_run_auto'] == 0 and cache[uid]['status_lagg'] == 0:
        count = 0
        cache[uid]['status_run_auto'] = 1
        seller_lot = [0, 0]

        while cache[uid]['status_run_auto'] == 1:
            lots = get_lots_refresh(call)  # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
            check_sell(call, uid, lots)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ü—Ä–æ–¥–∞–ª—Å—è –ª–∏ –ª–æ—Ç)

            if count == 0:
                seller_lot[0] = len(lots)

            seller_lot[1] = len(lots)

            if count <= DB['config_repeat']:

                if type_ == 'sell':

                    response = api.sell_lot(uid, def_traffic[0])
                    print(response)
                    if response['status']:
                        answer = '–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω\!'
                        menu.bot_active(call, answer)
                        time.sleep(2)
                        at = DB['config_autotime']
                        answer = '–ê–≤—Ç–æ\-–ø—Ä–æ–¥–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\!\n'
                        timer(answer, at, count, uid, call, DB)
                    else:
                        if '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞' == response['text']:
                            answer = '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–∞—Ñ–∏–∫–∞\!'
                            menu.bot_active(call, answer)
                            time.sleep(2)
                            stop(call)
                        elif '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response['text']:
                            from tg_bot import start
                            start(call.message)
                        else:
                            menu.error(call)
                        break
                elif type_ == 'top':
                    if len(lots) > 0:
                        rand_id = random.randint(0, len(lots) - 1)
                        lot_id = lots[f'{rand_id}']['id']
                        if not lots[str(rand_id)]['status']:
                            if lots[str(rand_id)]['status'] != 'revoked':

                                if DB['config_repeat'] != 0:
                                    count += 1
                                if count <= DB['config_repeat']:
                                    response = api.top(uid, lot_id)
                                    if response:
                                        if response['status']:
                                            answer_lot = text_lot(lots, f'{rand_id}')
                                            answer = f'–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø\:\n\n{answer_lot}'
                                            log('–õ–æ—Ç –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø!')
                                            menu.bot_active(call, answer)
                                            time.sleep(2)

                                            at = DB['config_autotime']
                                            answer = '–ê–≤—Ç–æ\-–ø–æ–¥–Ω—è—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç\!\n'
                                            timer(answer, at, count, uid, call, DB)
                                        else:
                                            if '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏' == response['text']:
                                                from tg_bot import start
                                                start(call.message)
                                                break
                                            else:
                                                answer = '–î–∞–Ω–Ω—ã–π –ª–æ—Ç —É–∂–µ –ø—Ä–æ–¥–∞–Ω\!' if 'is not in ACTIVE status.' in str(
                                                    response['text']) else str(response['text'])
                                                log(answer, 3)
                                                menu.bot_active(call, answer)
                                                time.sleep(2)
                                else:
                                    answer = f'–ê–≤—Ç–æ\-–ø–æ–¥–Ω—è—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\!'
                                    answer += f'\n–ü—Ä–æ–¥–∞–Ω–æ: {seller_lot[0] - seller_lot[1]} –ª–æ—Ç–æ–≤ –∑–∞ —Å–µ–∞–Ω—Å\.'
                                    log(answer)
                                    menu.bot_active(call, answer, sell_check=True)
                                    stop(call)
                                    break

                            else:
                                answer = f'–ü–æ–ø–∞–ª—Å—è —É–¥–∞–ª—ë–Ω–Ω—ã–π –ª–æ—Ç\!'
                                log(answer, 3)
                                menu.bot_active(call, answer)
                        else:
                            answer = f'–ü–æ–ø–∞–ª—Å—è –ª–æ—Ç –Ω–∞—Ö–æ–¥—è—â–∏–π—Å—è —É–∂–µ –≤ —Ç–æ–ø–µ\!'
                            log(answer, 3)
                            menu.bot_active(call, answer)
                    else:
                        answer = f'–õ–æ—Ç–æ–≤ –Ω–µ—Ç\!\n\n'
                        log(answer, 3)
                        menu.bot_active(call, answer, )
                        stop(call)
                        break
                else:
                    answer = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—É—Å–∫–∞!'
                    log(answer, 3)
    else:
        if not DB or DB['stage_authorize'] != 3:
            answer = '–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /auth'
            deauth(call)
        elif cache[uid]['status_run_auto'] != 0:
            answer = '–¶–∏–∫–ª –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω\! cache[uid][\'status_run_auto\'] = 1'
        elif cache[uid]['status_lagg'] != 0:
            answer = '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–æ\! cache[uid][\'status_lagg\'] = 1'
        else:
            answer = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ run_auto!'

        log(answer, 3)


def stop(call):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    uid = call.from_user.id

    if uid in cache:
        cache[uid]['status_run_auto'] = 0
        stop_timer[0] = True
        time.sleep(1.5)  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        get_lots = api.get_lots(uid)
        response = get_lots[0]
        active_traffic = get_lots[1]

        if response['status']:
            data_upd = {'list_lots': json.dumps(active_traffic)}  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–æ—Ç–æ–≤
            t2b(uid, data_upd, 'u')
        else:
            log(response['text'], 3)
            menu.bot_active(call, response['text'])

    res = menu.home(call)
    return res


def remove_minutes_lots(call):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    uid = call.from_user.id
    minutes = get_lots_refresh(call, delete_minutes=True)
    filtered_minutes = []

    for i in minutes:
        if minutes[i]['type'] == 'min':
            lid = minutes[i]['id']
            filtered_minutes.append(minutes[i]['id'])
            api.delete(uid, lid)

    if len(filtered_minutes) > 0:
        answer = '–í—Å–µ –ª–æ—Ç—ã —Å –º–∏–Ω—É—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã\!'
    else:
        answer = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –º–∏–Ω—É—Ç–∞–º–∏ –Ω–µ—Ç\!'

    menu.remove_minutes_lots(call, answer)
    time.sleep(3)
    res = menu.home(call)
    return True


def update_def_traffic(call):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    uid = call.from_user.id
    DB = t2b(uid)
    def_traffic[0]['volume']['value'] = DB["config_count"]
    def_traffic[0]['volume']['uom'] = DB['config_uom']
    def_traffic[0]['cost']['amount'] = DB["config_price"]
    def_traffic[0]['trafficType'] = DB["config_type"]

    return True


def get_lots_refresh(call, delete_minutes=False):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param delete_minutes: bool –æ–±: —É–¥–∞–ª—è—é—Ç—Å—è –ª–∏ –º–∏–Ω—É—Ç—ã –∏–ª–∏ –Ω–µ—Ç. –£–º–æ–ª—á–∞–Ω–∏–µ: 'False'.
    :return:
    """
    uid = call.from_user.id
    get_lots = api.get_lots(uid)
    response = get_lots[0]['response']
    active_lots = get_lots[1]
    lots = {}

    if response.ok:
        data_upd = {'list_lots': json.dumps(response.json()['data'])}
        t2b(uid, data_upd, 'u')

        data_upd = {'list_lots': json.dumps(active_lots)}
        t2b(uid, data_upd, 'u')
        DB = t2b(uid)

        all_lots = json.loads(DB['list_lots'])

        i = 0
        type_ = DB['config_type']
        type_ = 'gb' if type_ == 'data' else 'min' if type_ == 'volume' else False

        # –û—Ç—Å–µ–∏–≤–∞–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        if type_:
            for obj in all_lots:
                if delete_minutes:
                    type_ = 'min'
                if all_lots[obj]['type'] == type_:
                    lots[str(i)] = all_lots[obj]
                    i += 1
        else:
            lots = all_lots

        return lots

    return lots


def check_sell(call, uid, lots):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ª–æ—Ç–∞

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.
    """

    if uid in cache_lot:
        if len(lots) < len(cache_lot[uid]):
            answer = f'–õ–æ—Ç –ø—Ä–æ–¥–∞–Ω\!'
            menu.bot_active(call, answer, sell_check=True)
            time.sleep(3)
            return True

    cache_lot[uid] = lots
    return False


def send_sms(call):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –°–ú–°

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    uid = call.from_user.id
    data_upd = {'status_sms': 1, 'stage_authorize': 1}
    t2b(uid, data_upd, 'u')
    response = api.send_sms(uid)
    return response['status']


def delete_confirm(call, lid):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param lid: ID –ª–æ—Ç–∞.
    """

    uid = call.from_user.id
    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    lot_text = ''

    for lot in lots:
        lot_text = f'_{str(lots[lot]["value"])}_' + (
            '_–ì–ë_ ' if lots[lot]['type'] == 'gigabyte' else ' –º–∏–Ω—É—Ç—ã ') + \
                   f'–∑–∞ _{str(int(lots[lot]["price"]))}‚ÇΩ_'
        if lots[lot]['id'] == lid:
            break

    answer = f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –ª–æ—Ç: {lot_text} —Å –ø—Ä–æ–¥–∞–∂–∏\?'

    res = menu.delete_confirm(call, lid, answer)
    return res


def delete_yes(call, lid):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    :param lid: ID –ª–æ—Ç–∞.
    """

    uid = call.from_user.id
    response = api.delete(uid, lid)

    if response:
        answer = '–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\!'
    else:
        answer = '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏\!'

    row_width = 2

    menu.send(call, answer, (), row_width)
    time.sleep(1)

    res = profile(call)
    return res


def edit_lots(call):
    """
    –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    uid = call.from_user.id
    get_lots = api.get_lots(uid)
    response = get_lots['response']

    if response['status']:
        data_upd = {'list_lots': json.dumps(['active_traffic'])}
        t2b(uid, data_upd, 'u')

    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    res = menu.get_lots(call, lots)
    return res


def redactor_lot(call, lid):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid: ID –ª–æ—Ç–∞.
    """
    uid = call.from_user.id
    if uid not in cache:
        cache[uid] = {'status_lagg': 0, 'status_run_auto': 0}
    cache[uid]['lid'] = lid

    response = api.get_lots(uid)
    if response['status']:
        data_upd = {'list_lots': json.dumps(response['active_traffic'])}
        t2b(uid, data_upd, 'u')

    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    res = menu.redactor_lot(call, lid, lots)
    return res


# noinspection PyTypeChecker
def top(call, lid):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid:
    """
    uid = call.from_user.id
    DB = t2b(uid)
    lots = dict(json.loads(DB['list_lots']))
    response = api.top(uid, lid)
    lot = {}
    if response:
        if response['status']:
            for i in lots:
                lot[0] = i
                if lots[i]['id'] == lid:
                    break
            answer_lot = text_lot(lots, lot[0])

            answer = f'–õ–æ—Ç "{answer_lot}" \n\- —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø\!'
            log(answer)
            bot.send_message(call.message.chat.id, answer, parse_mode='MarkdownV2')
            time.sleep(2)
            res = redactor_lot(call, lid)
            return res


def name(call_, lid_):
    """

    :param call_: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid_:
    """
    return call_, lid_


def price(call):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """

    res = menu.price(call)
    uid = call.from_user.id
    data_upd = {'lvl_redactor': 1}
    t2b(uid, data_upd, 'u')
    return res


# noinspection PyTypeChecker
def price_accept(call):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    uid = call.from_user.id
    data = call.data

    lid = cache[uid]['lid']
    lots = dict(json.loads(t2b(uid)['list_lots']))
    lot = {}

    for i in lots:
        lot[0] = i
        if lots[i]['id'] == lid:
            break

    price_ = str(int(data))
    emoji_ = lots[lot[0]]["emojis"]
    name_ = True if lots[lot[0]]['name'] is not None else False
    data = (name_, emoji_, price_)
    api.rename(uid, lots[lot[0]], data)
    time.sleep(3)
    res = redactor_lot(call, lid)
    return res


def emoji(call, lid):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid:
    """
    res = menu.emoji(call, lid)
    uid = call.from_user.id
    data_upd = {'lvl_redactor': 2}
    t2b(uid, data_upd, 'u')
    return res


def save(call, lid):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param lid:
    """
    return call, lid


def up(call):
    """

    :param call: –î–∞–Ω–Ω—ã–µ –æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    """
    uid = call.from_user.id

    lots = get_lots_refresh(call)

    print('lots')
    print(lots)

    if len(lots) > 0:
        rand_id = random.randint(0, len(lots) - 1)
        lot_id = lots[f'{rand_id}']['id']

        response = api.top(uid, lot_id)
        if response:
            return True
        else:
            return False
    else:

        return False
