"""
    –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –¢2 –±–æ—Ç–∞
"""

import json
import math
import random
import time

from handlers_tgBot import bot
from T2 import config, menu
from T2.session_manager import get_api

from functions import (text_lot, t2b)
from log import log
from constants import (NUMBER_T2, PASSWORD_T2, SECRET_FORMAT_NUMBER_T2)

def_account = config.account
def_traffic = config.add_traffic()
cache = {}
cache_lot = {}
stop_timer = [False]


class Auth:
    @staticmethod
    def stage_filter(call):
        uid = call.from_user.id
        DB = t2b(uid)
        data = call.data

        if DB['stage_authorize'] < 3:
            if DB['stage_authorize'] == 0:
                return Auth.stage_0_login_number(uid, DB, data, call)
            elif DB['stage_authorize'] == 1:
                return Auth.stage_1_password_or_sms(uid, DB, data, call)
            elif DB['stage_authorize'] == 2:
                return Auth.stage_2_complete_auth(uid, DB, data, call)
        else:
            log("–£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", 3)
            return 2

    @staticmethod
    def stage_0_login_number(uid, DB, data, call):
        phone = normalize_phone_number(data)
        if len(phone) == 11 and phone.startswith('79'):
            t2b(uid, {'auth_login': phone, 'stage_authorize': 1}, 'u')
            menu.login_password(call)
            return 1
        else:
            menu.login_number(call, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7900...')
            return 1

    @staticmethod
    def stage_1_password_or_sms(uid, DB, data, call):
        api = get_api(uid)

        if DB['status_sms'] == 0:
            if not DB.get('auth_password'):
                t2b(uid, {'auth_password': data}, 'u')

            response = api.send_security_code(uid)
            if response and 'security_code_token' in response:
                t2b(uid, {
                    'stage_authorize': 2,
                    'security_code_token': response['security_code_token']
                }, 'u')
                menu.security_code(call)
                return True
            else:
                log("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ security code", 3)
        else:
            api.send_sms_code()
            t2b(uid, {'stage_authorize': 2}, 'u')
            menu.sms(call)
            return True
        return None

    @staticmethod
    def stage_2_complete_auth(uid, DB, data, call):
        api = get_api(uid)
        try:
            if DB['status_sms'] == 0:
                token = api.auth_with_password(DB['auth_login'], DB['security_code'], DB['security_code_token'], DB['auth_password'])
            else:
                token = api.auth_with_code(DB['auth_login'], data)

            if token:
                access_token, refresh_token = token
                t2b(uid, {
                    'token': access_token,
                    'refresh_token': refresh_token,
                    'stage_authorize': 3,
                    'status_sms': 0
                }, 'u')
                update_def_traffic(call)
                cache[uid] = {'status_run_auto': 0, 'status_lagg': 0}
                return 2
        except Exception as e:
            log(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", 3)
            t2b(uid, type_='d')
            t2b(uid)
            menu.login_number(call, '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 7900...')
            return 0


class Settings():
    @staticmethod
    def stage_filter(call):
        uid = call.from_user.id
        DB = t2b(uid)
        data = call.data

        config_uom = DB['config_uom']

        if DB['lvl_setting'] == 0:
            Settings.open_menu(uid, DB, data, config_uom, call)
        elif DB['lvl_setting'] == 1:
            Settings.interval(uid, DB, data, config_uom, call)
        elif DB['lvl_setting'] == 2:
            Settings.count(uid, DB, data, config_uom, call)
        elif DB['lvl_setting'] == 3:
            Settings.repeat(uid, DB, data, config_uom, call)
        elif DB['lvl_setting'] == 4:
            Settings.type(uid, DB, data, config_uom, call)

    @staticmethod
    def open_menu(uid, DB, data, config_uom, call):
        name_ = ("üåê *–í–∏–¥:* –ì–∏–≥–∞–±–∞–π—Ç—ã" if DB['config_uom'] == "gb" else "‚òéÔ∏è *–í–∏–¥:* –ú–∏–Ω—É—Ç—ã")
        name2 = ("–ì–ë" if DB['config_uom'] == "gb" else "–ú–ò–ù")
        answer = f'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–¢–µ–∫—É—â–∏–µ: \n{name_}\. ' \
                 f'\nüìè *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* {DB["config_count"]}{name2} –∑–∞ {DB["config_price"]}‚ÇΩ' \
                 f'\nüïì *–ò–Ω—Ç–µ—Ä–≤–∞–ª:* {DB["config_autotime"]} —Å–µ–∫—É–Ω–¥\.' \
                 f'\nüîÇ *–ü–æ–≤—Ç–æ—Ä—ã:* {DB["config_repeat"]} —Ä–∞–∑\(–∞\)\.'
        res = menu.settings(call, answer)
        return res

    @staticmethod
    def interval(uid, DB, data, config_uom, call):
        try:
            int(data)
            data_upd = {'config_autotime': call.message.text}
            t2b(uid, data_upd, 'u')
            return True
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5'
            menu.settings(call, answer)
            return False

    @staticmethod
    def count(uid, DB, data, config_uom, call):
        uid = call.from_user.id
        DB = t2b(uid)
        data = call.data

        config_uom = DB['config_uom']

        try:
            config_price = int(data)
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã.'
            menu.settings(call, answer)
            return False

        data_upd = {'config_count': data, 'config_price': math.ceil(config_price * 15) if config_uom == 'gb' else
        {'config_count': data, 'config_price': math.ceil(int(data) / 1.25) if config_uom == 'min' else None}}

        t2b(uid, data_upd, 'u')

        return True

    @staticmethod
    def repeat(uid, DB, data, config_uom, call):
        uid = call.from_user.id
        DB = t2b(uid)
        data = call.data

        try:
            int(data)
            data_upd = {'config_repeat': call.message.text}
            t2b(uid, data_upd, 'u')
            return True
        except TypeError:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–æ–≤, \n—á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç \n–ø–æ–¥–Ω—è—Ç–∏–µ –∏–ª–∏ ' \
                     '–≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ\. –£–∫–∞–∑–∞–≤ 0, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –±—É–¥—É—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã\. ' \
                     '\n–ò—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10'
            menu.settings(call, answer)
            return False

    @staticmethod
    def type(uid, DB, data, config_uom, call):
        uid = call.from_user.id
        DB = t2b(uid)
        data = call.data

        config_uom = DB['config_uom']

        if data == '–ú–∏–Ω—É—Ç—ã':
            data_upd = {'config_type': 'voice', 'config_count': 62, 'config_price': 50, 'config_uom': 'min'}
            t2b(uid, data_upd, 'u')
            return True
        elif data == '–ì–∏–≥–∞–±–∞–π—Ç—ã':
            data_upd = {'config_type': 'data', 'config_count': 6, 'config_price': 90, 'config_uom': 'gb'}
            t2b(uid, data_upd, 'u')
            return True
        else:
            answer = 'üõ†Ô∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏\.* \n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –¥–ª—è –≤–∞—Å —Ç–∏–ø —Ç—Ä–∞—Ñ–∏–∫–∞:'
            menu.settings(call, answer)
            return True


def admin_auth(call):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞–¥–º–∏–Ω—Å–∫–∏–º –Ω–æ–º–µ—Ä–æ–º.

    :param call: CallbackQuery
    :return: Bool –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –Ω–µ—É–¥–∞—á–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    """
    deauth(call)  # –î–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è, –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫.
    uid = call.from_user.id
    log(f'–í—Ö–æ–¥ –≤ {SECRET_FORMAT_NUMBER_T2}')
    t2b(uid, {
        'auth_login': NUMBER_T2,
        'auth_password': PASSWORD_T2,
        'status_sms': 0,
        'stage_authorize': 1  # 1 –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã—à–µ 0
    }, 'u')
    return Auth.stage_filter(call)


def deauth(call, lobby=False):
    """
    –°–±—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

    :param call: CallbackQuery.
    :param lobby: –ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ª–æ–±–±–∏, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è start.
    :return: Boolean –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–∞–±–æ—Ç—ã.
    """
    uid = call.from_user.id
    try:
        t2b(uid, type_='d')
        if lobby:
            menu.start(call.message)
        log(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω.')
        return True
    except KeyError:
        log(f'–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}', 3)
        return False


def home_menu(call):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞.

    :param call: CallbackQuery
    """

    uid = call.from_user.id
    cache[uid] = {'status_run_auto': 0, 'status_lagg': 0}
    return True


def profile(call):
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è.

    :param call: –û–±—ä–µ–∫—Ç CallbackQuery
    """
    uid = call.from_user.id
    api = get_api(uid)

    try:
        rests = api.get_rests()
        stats = api.get_statistics()
        balance = api.get_balance()
        name = api.get_name()
    except Exception as e:
        log(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–æ—Ñ–∏–ª—è: {e}', 3)
        menu.error(call)
        return False

    if not all([rests, stats, balance, name]):
        log(f'–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ: rests={rests}, stats={stats}, balance={balance}, name={name}', 3)
        menu.error(call)
        return False

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª
    def fmt(num):
        s = f"{int(num):,}".replace(',', "'")
        return s

    answer = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name['data']}!\n\n"
        f"üí∞ *–ë–∞–ª–∞–Ω—Å:* _{fmt(balance)}‚ÇΩ_\n"
        f"‚úÖ *–î–æ—Å—Ç—É–ø–Ω–æ:* {rests['data']} –ì–ë –∏ {rests['voice']} –ú–ò–ù\n"
        f"üõí *–ü—Ä–æ–¥–∞–Ω–æ:* {fmt(stats['soldData']['value'])} –ì–ë –∏ {fmt(stats['soldVoice']['value'])} –ú–ò–ù\n"
        f"üìà *–î–æ—Ö–æ–¥:* {fmt(stats['totalIncome']['amount'])}‚ÇΩ\n"
    )

    return answer


def timer(answer, at, count, uid, call, DB):
    """
    –†–∞–±–æ—Ç–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.

    :param DB: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    :param answer: –¢–µ–∫—Å—Ç
    :param at: –í—Ä–µ–º—è
    :param count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param call: CallbackQuery
    """

    rand_time = random.randint(0, 5)  # –†–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
    at += rand_time

    if DB['config_repeat'] > 0:
        answer += '\n*–û—Å—Ç–∞–ª–æ—Å—å:* ' + str(
            DB['config_repeat'] - count) + ' —Ä–∞–∑\(–∞\)'
    second_text = ' —Å–µ–∫—É–Ω–¥' if (str(at)[len(str(at)) - 1] in ('5', '6', '7', '8', '9', '0')
                                or (str(at)[0] == '1' if len(str(at)) > 1 else False)) \
        else (' —Å–µ–∫—É–Ω–¥—ã' if str(at)[len(str(at)) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')

    answer3 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + str(
        at) + second_text  # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
    menu.bot_active(call, answer3, True)

    cache[uid]['status_lagg'] = 1
    cache[uid]['timer'] = 0
    stop_timer[0] = False
    while cache[uid]['timer'] < int(at):
        if stop_timer[0]:
            cache[uid]['timer'] = int(at)
        else:
            at = DB['config_autotime']
            time.sleep(0.85)
            cache[uid]['timer'] += 1
            ct = str(int(at) - int(cache[uid]['timer']))
            second_text2 = ' —Å–µ–∫—É–Ω–¥' if (str(ct)[len(ct) - 1] in ('5', '6', '7', '8', '9', '0')
                                         or ((True if str(at)[0] == '1' else False) if len(str(ct)) > 1 else False)) \
                else (' —Å–µ–∫—É–Ω–¥—ã' if str(ct)[len(ct) - 1] in ('2', '3', '4') else ' —Å–µ–∫—É–Ω–¥–∞')
            answer2 = answer + '\n*–û–∂–∏–¥–∞–Ω–∏–µ:* ' + ct + second_text2  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞
            menu.bot_active(call, answer2, True)
    cache[uid]['timer'] = 0
    cache[uid]['status_lagg'] = 0


def run_auto(call, type_='sell'):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂—É –∏–ª–∏ –∞–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ.

    :param call: CallbackQuery
    :param type_: 'sell' –∏–ª–∏ 'top'
    """
    uid = call.from_user.id
    DB = t2b(uid)
    api = get_api(uid)

    if DB['stage_authorize'] != 3:
        log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω", 3)
        menu.bot_active(call, "–ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É: /auth")
        return

    if cache.get(uid, {}).get('status_run_auto') == 1:
        log("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞", 3)
        menu.bot_active(call, "–¶–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
        return

    cache[uid] = {'status_run_auto': 1, 'status_lagg': 0}
    count = 0
    seller_lot = [0, 0]

    while cache[uid]['status_run_auto']:
        lots = get_lots_refresh(call)  # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤
        check_sell(call, uid, lots)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ (–ü—Ä–æ–¥–∞–ª—Å—è –ª–æ—Ç–∞ –Ω–∞ —Ñ–∞–∫—Ç –ø—Ä–æ–¥–∞–∂–∏)

        if count == 0:
            seller_lot[0] = len(lots)
        seller_lot[1] = len(lots)

        if count >= DB['config_repeat'] and DB['config_repeat'] > 0:
            break

        if type_ == 'sell':
            result = api.sell_lot(def_traffic[0])
            if result:
                menu.bot_active(call, "–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                time.sleep(2)
                timer("–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", DB['config_autotime'], count, uid, call, DB)
            else:
                menu.bot_active(call, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ª–æ—Ç–∞.")
                stop(call)
                break
        elif type_ == 'top':
            if lots:
                rand_id = random.choice(list(lots.keys()))
                lot_id = lots[rand_id]['id']
                result = api.top(lot_id)
                if result:
                    menu.bot_active(call, f"–õ–æ—Ç #{lot_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç!")
                    time.sleep(2)
                    timer("–ê–≤—Ç–æ-–ø–æ–¥–Ω—è—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", DB['config_autotime'], count, uid, call, DB)
                else:
                    menu.bot_active(call, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –≤ —Ç–æ–ø.")
                    stop(call)
                    break
            else:
                menu.bot_active(call, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–æ—Ç–æ–≤.")
                stop(call)
                break

        count += 1

    stop(call)


def stop(call):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç—ã.

    :param call: CallbackQuery
    """
    uid = call.from_user.id
    cache[uid]['status_run_auto'] = 0
    stop_timer[0] = True

    api = get_api(uid)
    lots = api.get_active_lots()
    if lots:
        t2b(uid, {'list_lots': json.dumps(lots)}, 'u')
    else:
        log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç—ã", 3)

    return menu.home(call)


def remove_minutes_lots(call):
    """

    :param call: CallbackQuery
    """

    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)
    minutes = get_lots_refresh(call, delete_minutes=True)
    filtered_minutes = []

    for i in minutes:
        if minutes[i]['type'] == 'min':
            lid = minutes[i]['id']
            filtered_minutes.append(minutes[i]['id'])
            api.delete(uid, lid)

    if len(filtered_minutes) > 0:
        answer = '–í—Å–µ –ª–æ—Ç—ã —Å –º–∏–Ω—É—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã\!'
    else:
        answer = '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –º–∏–Ω—É—Ç–∞–º–∏ –Ω–µ—Ç\!'

    menu.remove_minutes_lots(call, answer)
    time.sleep(3)
    res = menu.home(call)
    return True


def update_def_traffic(call):
    """

    :param call: CallbackQuery
    """
    uid = call.from_user.id
    DB = t2b(uid)
    def_traffic[0]['volume']['value'] = DB["config_count"]
    def_traffic[0]['volume']['uom'] = DB['config_uom']
    def_traffic[0]['cost']['amount'] = DB["config_price"]
    def_traffic[0]['trafficType'] = DB["config_type"]

    return True


def get_lots_refresh(call, delete_minutes=False):
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É

    :param call: CallbackQuery
    :param delete_minutes: bool, –µ—Å–ª–∏ True ‚Äî —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–∏–Ω—É—Ç—ã
    """
    uid = call.from_user.id
    api = get_api(uid)
    DB = t2b(uid)

    response = api.get_active_lots()
    if not response:
        log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ—Ç–æ–≤', 3)
        return {}

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    type_filter = 'min' if delete_minutes else ('gb' if DB['config_type'] == 'data' else 'min')
    filtered = {str(i): lot for i, lot in enumerate(response) if lot['volume']['uom'] == type_filter}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    t2b(uid, {'list_lots': json.dumps(filtered)}, 'u')

    return filtered


def check_sell(call, uid, lots):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ª–æ—Ç–∞

    :param call: CallbackQuery.
    :param uid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param lots: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–æ–≤.
    """

    if uid in cache_lot and len(lots) < len(cache_lot[uid]):
        log("–õ–æ—Ç –ø—Ä–æ–¥–∞–Ω", 2)
        menu.bot_active(call, "–õ–æ—Ç –ø—Ä–æ–¥–∞–Ω!", sell_check=True)
        time.sleep(2.5)
        return True

    cache_lot[uid] = lots
    return False


def send_sms(call):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    :param call: CallbackQuery
    """
    uid = call.from_user.id
    t2b(uid, {'status_sms': 1, 'stage_authorize': 1}, 'u')
    result = Auth.stage_filter(call)
    return bool(result)


def delete_confirm(call, lid):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ—Ç–∞.

    :param call: CallbackQuery.
    :param lid: ID –ª–æ—Ç–∞.
    """

    uid = call.from_user.id
    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    lot_text = ''

    for lot in lots:
        lot_text = f'_{str(lots[lot]["value"])}_' + (
            '_–ì–ë_ ' if lots[lot]['type'] == 'gigabyte' else ' –º–∏–Ω—É—Ç—ã ') + \
                   f'–∑–∞ _{str(int(lots[lot]["price"]))}‚ÇΩ_'
        if lots[lot]['id'] == lid:
            break

    answer = f'–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å –ª–æ—Ç: {lot_text} —Å –ø—Ä–æ–¥–∞–∂–∏\?'

    res = menu.delete_confirm(call, lid, answer)
    return res


def delete_yes(call, lid):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ—Ç–∞.

    :param call: CallbackQuery.
    :param lid: ID –ª–æ—Ç–∞.
    """

    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)
    response = api.delete(uid, lid)

    if response:
        answer = '–õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω\!'
    else:
        answer = '–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏\!'

    row_width = 2

    menu.send(call, answer, (), row_width)
    time.sleep(1)

    res = profile(call)
    return res


def edit_lots(call):
    """
    –ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–æ–≤.

    :param call: CallbackQuery
    """
    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)
    get_lots = api.get_lots(uid)
    response = get_lots['response']

    if response:
        data_upd = {'list_lots': json.dumps(['active_traffic'])}
        t2b(uid, data_upd, 'u')

    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    res = menu.get_lots(call, lots)
    return res


def redactor_lot(call, lid):
    """
    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.

    :param call: CallbackQuery
    :param lid: ID –ª–æ—Ç–∞.
    """
    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)

    if uid not in cache:
        cache[uid] = {'status_lagg': 0, 'status_run_auto': 0}
    cache[uid]['lid'] = lid

    response = api.get_lots(uid)
    if response:
        data_upd = {'list_lots': json.dumps(response['active_traffic'])}
        t2b(uid, data_upd, 'u')

    DB = t2b(uid)
    lots = json.loads(DB['list_lots'])
    res = menu.redactor_lot(call, lid, lots)
    return res


# noinspection PyTypeChecker
def top(call, lid):
    """

    :param call: CallbackQuery
    :param lid:
    """
    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)
    lots = dict(json.loads(DB['list_lots']))
    response = api.top(uid, lid)
    lot = {}
    if response:
        if response:
            for i in lots:
                lot[0] = i
                if lots[i]['id'] == lid:
                    answer_lot = text_lot(lots, lot[0])

                    answer = f'–õ–æ—Ç "{answer_lot}" \n\- —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–Ω—è—Ç –≤ —Ç–æ–ø\!'
                    log(answer)
                    bot.send_message(call.message.chat.id, answer, parse_mode='MarkdownV2')
                    break

            time.sleep(2)
            res = redactor_lot(call, lid)
            return res


def name(call_, lid_):
    """

    :param call_: CallbackQuery
    :param lid_:
    """
    return call_, lid_


def price(call):
    """

    :param call: CallbackQuery
    """

    res = menu.price(call)
    uid = call.from_user.id
    data_upd = {'lvl_redactor': 1}
    t2b(uid, data_upd, 'u')
    return res


# noinspection PyTypeChecker
def price_accept(call):
    """

    :param call: CallbackQuery
    """
    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)
    data = call.data

    lid = cache[uid]['lid']
    lots = dict(json.loads(t2b(uid)['list_lots']))
    lot = {}

    for i in lots:
        lot[0] = i
        if lots[i]['id'] == lid:
            break

    price_ = str(int(data))
    emoji_ = lots[lot[0]]["emojis"]
    name_ = True if lots[lot[0]]['name'] is not None else False
    data = (name_, emoji_, price_)
    api.rename(uid, lots[lot[0]], data)
    time.sleep(3)
    res = redactor_lot(call, lid)
    return res


def emoji(call, lid):
    """

    :param call: CallbackQuery
    :param lid:
    """
    res = menu.emoji(call, lid)
    uid = call.from_user.id
    data_upd = {'lvl_redactor': 2}
    t2b(uid, data_upd, 'u')
    return res


def save(call, lid):
    """

    :param call: CallbackQuery
    :param lid:
    """
    return call, lid


def up(call):
    """

    :param call: CallbackQuery
    """
    uid = call.from_user.id
    DB = t2b(uid)

    api = get_api(uid)

    lots = get_lots_refresh(call)

    print('lots')
    print(lots)

    if len(lots) > 0:
        rand_id = random.randint(0, len(lots) - 1)
        lot_id = lots[f'{rand_id}']['id']

        response = api.top(uid, lot_id)
        if response:
            return True
        else:
            return False
    else:

        return False


def normalize_phone_number(number: str) -> str:
    """
    –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∫ —Ñ–æ—Ä–º–∞—Ç—É 79XXXXXXXXX
    """
    number = number.strip()
    if number.startswith('+7'):
        return '7' + number[2:]
    elif number.startswith('8'):
        return '7' + number[1:]
    return number
